{"version":3,"sources":["App.module.css","components/ProvenanceTable.module.css","components/ProvenanceIsolatedNodes.module.css","components/TableDataLoader.module.css","SidePane.module.css","static/taskImages sync /^/.//.*/.png$","static/taskImages/S-task01_adjMatrix.png","static/taskImages/S-task01_nodeLink.png","static/taskImages/S-task02_adjMatrix.png","static/taskImages/S-task02_nodeLink.png","static/taskImages/S-task03_adjMatrix.png","static/taskImages/S-task03_nodeLink.png","static/taskImages/S-task04_adjMatrix.png","static/taskImages/S-task04_nodeLink.png","static/taskImages/S-task05_adjMatrix.png","static/taskImages/S-task05_nodeLink.png","static/taskImages/S-task06_adjMatrix.png","static/taskImages/S-task06_nodeLink.png","static/taskImages/S-task07_adjMatrix.png","static/taskImages/S-task07_nodeLink.png","static/taskImages/S-task08_adjMatrix.png","static/taskImages/S-task08_nodeLink.png","static/taskImages/S-task09_adjMatrix.png","static/taskImages/S-task09_nodeLink.png","static/taskImages/S-task10_adjMatrix.png","static/taskImages/S-task10_nodeLink.png","static/taskImages/S-task11_adjMatrix.png","static/taskImages/S-task11_nodeLink.png","static/taskImages/S-task12_adjMatrix.png","static/taskImages/S-task12_nodeLink.png","static/taskImages/S-task13_adjMatrix.png","static/taskImages/S-task13_nodeLink.png","static/taskImages/S-task14_adjMatrix.png","static/taskImages/S-task14_nodeLink.png","static/taskImages/S-task15_adjMatrix.png","static/taskImages/S-task15_nodeLink.png","static/taskImages/S-task16_adjMatrix.png","static/taskImages/S-task16_nodeLink.png","fetchers/fetchMocks.js","hooks/hooks.js","components/ProvenanceDataContext.tsx","components/eventMapping.js","components/ProvenanceIsolatedNodes.tsx","pages/Home.tsx","pages/Study.tsx","pages/Upload.tsx","pages/Overview.tsx","pages/Export.tsx","components/TableFilters.tsx","components/reactTagWrapper.tsx","components/ColumnDefinitions.tsx","components/DevExtremeTable.tsx","components/TableDataLoader.tsx","pages/Table.tsx","Main.tsx","components/CheckBox.tsx","components/sortMenu.tsx","SidePane.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","host","getDataFromServer","a","console","log","mockAllData","mockAPICall","res","getSchema","tableID","getData","getTaskDataFromServer","taskID","endpoint","body","postData","uri","postBody","fetchOptions","defaultHeaders","url","method","headers","JSON","stringify","completePromise","val","Accept","requestOptions","fetch","response","json","data","success","ok","returnData","options","shouldError","timeout","Promise","resolution","rejection","setTimeout","error","useFetchAPIData","fetchingFunc","dependencies","useState","isLoading","setIsLoading","errorMessage","setErrorMessage","fetchedData","setFetchedData","onError","useEffect","then","result","message","catch","ProvenanceDataContext","React","createContext","ProvenanceDataContextProvider","conditions","children","selectedTaskIds","setSelectedTaskIds","setData","metrics","setMetrics","homeTaskSort","setHomeTaskSort","dataFromServer","ms","handleTagCreation","participantID","tag","action","setTaskSort","currentTaskData","setCurrentTaskData","datum","sequence","parse","err","taskDataFromServer","Provider","value","taskStructure","name","key","prompt","actions","stats","handleChangeSelectedTaskId","event","target","handleProvenanceNodeClick","taskId","mysql_api","resolved","alert","colors","answerSelectColor","dragColor","sortColor","selectColor","searchColor","clearColor","eventMapping","custom","color","icon","width","height","startedProvenance","answerBox","sort","attrRow","IsolatedNode","node","eventMap","Tooltip","TransitionComponent","Fade","TransitionProps","title","count","PopperProps","popperOptions","modifiers","offset","enabled","arrow","x","y","rx","fill","opacity","scale","transform","ProvenanceIsolatedNodes","nodes","selectedItemId","className","styles","wrapper","style","display","flexDirection","index","onClick","theme","createMuiTheme","overrides","MuiTableCell","root","padding","useStyles","makeStyles","minWidth","flexGrow","table","sortable","cursor","backgroundColor","sorted","media","condition","fontSize","bullet","margin","pos","marginBottom","maxValue","d3","range","domain","BarChart","props","allData","hoveredRow","hoveredRowColor","metric","vert","size","find","m","type","maxBarHeight","varsToPlot","entries","b","slice","yDomain","v","xDomain","xScale","yScale","barWidth","bandwidth","hoveredStats","undefined","hoveredVarsToPlot","nothingToPlot","length","x1","y1","x2","y2","stroke","strokeWidth","entry","tooltipText","Fragment","textAnchor","filter","d","Stimulus","conditionName","classes","Box","mt","mb","mr","boxShadow","CardMedia","component","image","require","Typography","variant","SequenceCount","row","numIconsPerCol","Math","floor","numCols","ceil","iconWidth","currentParticipants","matchingSequences","s","hoveredParticipants","intersection","includes","Array","from","fontWeight","alignmentBaseline","SortIconContainer","paddingTop","TableComponent","rows","setHoveredRow","desc","setSort","aValue","seq","bValue","rValue","TableContainer","maxHeight","stickyHeader","aria-label","TableHead","TableRow","header","TableCell","sameKey","TableBody","i","onMouseEnter","onMouseLeave","background","scope","seqObj","answer","align","Histogram","hoveredCI","ci","Grid","item","DrawHistogram","hovered","setHovered","average","lowerBound","upperBound","bins","hist","textLabel","round","barPadding","cx","cy","r","ConditionCard","freqPattern","metricValues","hidden","setHidden","patterns","topK","Set","container","spacing","xs","justify","overflow","rowHeight","p","Divider","TaskCard","task","Card","CardContent","marginLeft","cKey","CardActions","Button","TaskContainer","useContext","getValues","conditionFilter","sortKey","values","c","push","tasks","aValues","bValues","max","min","categories","StudyCard","hoveredElement","uniqueID","participants","study","eventID","random","conditionGroups","allLevels","level","flat","category","minutesToComplete","reduce","rv","cond","justifyContent","participant","borderBottom","borderColor","averageAccuracy","eventData","metricSquare","barHeight","labelHeight","textWidth","labelWidth","axisHeight","colorScale","maxTime","elapsedTime","duration","phases","filteredData","labelPos","labelStart","labelExtent","n","label","shortName","metricColorScales","metricYScales","taskTimeScales","colorRange","heightRange","timeScaleRange","getStats","taskInfo","dd","out","trim","t","taskList","rectWidth","onMouseOver","onMouseOut","ciPlot","timeScale","avg","slower","minTime","diff","abs","lineHeight","glyphSize","vertScale","Upload","taskTooltip","filteredMetrics","nodeWidth","frequentActions","evenlabelPos","eveny","labels","textHeight","renderPattern","Search","Input","Overview","location","placeholder","enterButton","PlusSquareOutlined","Export","buckets","currentBins","thresholds","bucket","currentBinCounter","x0","Brush","onChange","brushRef","useRef","current","dayBrush","brushX","extent","on","selection","warn","select","selectAll","enter","append","attr","call","ref","BrushableHistogram","setMinimum","setMaximum","inputs","invert","QuantitativeFilter","onFilter","minimum","maximum","debouncedMin","useDebounce","debouncedMax","filterMin","filterMax","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","TagWrapper","tags","onTagChange","isMaster","autofocus","allowNew","handleDelete","splice","handleAddition","QuantitativeCell","additionalComponents","rowData","commonScale","time","NotesColumn","metaData","this","selectionIndicies","cellStyle","customSort","filterComponent","render","isArray","findIndex","iterTag","CategoricalColumn","order","hideByDefault","QuantitativeColumn","handleFilterChange","customFilterAndSearch","filterQuantitativeValues","cellComponent","niceX","nice","binner","groupedSummaryComponent","incomingData","partitionedData","newWidth","Component","EventsSummary","ProvenanceColumn","renderData","GroupDataResolver","setPartitionedData","_","isFunction","toFixedTrunc","toString","split","f","substr","GroupCellContent","provenanceData","column","groupData","columnSummaries","Content","GroupCell","FilterCells","other","Item","restProps","itemProps","assign","Cell","ProvenanceCells","generateColumnDefinition","columnSchema","columnsMetaData","defaultColumnDefinition","columnMetaData","columnKey","getColumnMetaData","COLUMN_NAME","DATA_TYPE","DevExtremeTable","tableSchema","filters","setFilters","handleFilter","columnName","currentFilterIndex","clonedFilters","accuracy","notes","setColumns","generateColumnObject","columns","setSelectionInternal","grouping","setGroupingInternal","integratedGroupingColumnExtensions","useMemo","group","groupingValue","groupMetaData","criteria","filterValue","isRowInTrueGroup","quantitativePredicate","showWhenGrouped","tableGroupColumnExtension","defaultColumnWidths","predicate","IntegratedFiltering","defaultPredicate","filteringColumnExtensions","showInGroupFooter","alignByColumn","groupSummaryItems","defaultHiddenColumnNames","Paper","onGroupingChange","newGrouping","secondArray","newlyAddedGroups","firstArrayItem","some","secondArrayItem","currentFilter","filterItem","newGroupIndex","newGroup","columnGroupingEnabled","columnExtensions","groupItems","calculator","getValue","onFiltersChange","onSelectionChange","columnWidths","showGroupingControls","showSelectAll","rowComponent","groupedRowHeader","groupedBy","columnInfo","groupHeaderRow","colSpan","groupHeaderContent","Row","summaryCellComponent","showColumnsWhenGrouped","stubCellComponent","stubProps","shouldHideStub","groupedByRow","tableRow","inlineSummaryComponent","TableDataLoader","setHeight","setTableSchema","schemaFromServer","hiddenColumns","hideAggregate","concat","ORDINAL_POSITION","bounds","onResize","contentRect","measureRef","LoaderStyles","loader","Skeleton","animation","Table","Wrapper","styled","div","withRouter","TransitionGroup","CSSTransition","classNames","path","Home","Study","CheckBox","visible","checkBoxCallback","checked","setChecked","Checkbox","evt","stopPropagation","inputProps","marginTop","MenuWrapper","option","handleMenuItemClickCallback","setHoveredRowCallback","selectedIndex","initialState","filterConditions","setConditions","currentState","checkboxes","MenuItem","selected","SortMenu","anchorEl","setAnchorEl","setSelectedIndex","handleMenuItemClick","sortObj","List","ListItem","button","aria-haspopup","aria-controls","currentTarget","ListItemText","primary","secondary","keepMounted","open","Boolean","onClose","createStyles","typography","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","leavingScreen","appBarShift","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","mixins","content","SidePane","useTheme","setOpen","HomeLink","forwardRef","innerRef","to","StudyLink","useLocation","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","edge","pathname","FormControl","SelectedTaskInput","Select","labelId","ml","noWrap","dangerouslySetInnerHTML","__html","Drawer","paper","direction","text","link","HomeIcon","ComputerIcon","CloudUpload","TableChart","GetApp","ListItemIcon","isCurrent","Icon","makeIcon","App","initialEntries","initialIndex","sidePane","main","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.550a8309.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"header\":\"App_header__3ZZ1n\",\"logo\":\"App_logo__1ItuU\",\"sidePane\":\"App_sidePane__3RleR\",\"main\":\"App_main__3ZkGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spin\":\"ProvenanceTable_spin__3Jw--\",\"groupHeaderRow\":\"ProvenanceTable_groupHeaderRow__pwvw-\",\"groupHeaderContent\":\"ProvenanceTable_groupHeaderContent__1Zlne\",\"rotate\":\"ProvenanceTable_rotate__XaLA9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProvenanceIsolatedNodes_wrapper__3cJfW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"TableDataLoader_loader__1QxY3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"SidePane_logo__3vZO1\",\"SelectedTaskInput\":\"SidePane_SelectedTaskInput__1nreK\"};","var map = {\n\t\"./S-task01_adjMatrix.png\": 310,\n\t\"./S-task01_nodeLink.png\": 311,\n\t\"./S-task02_adjMatrix.png\": 312,\n\t\"./S-task02_nodeLink.png\": 313,\n\t\"./S-task03_adjMatrix.png\": 314,\n\t\"./S-task03_nodeLink.png\": 315,\n\t\"./S-task04_adjMatrix.png\": 316,\n\t\"./S-task04_nodeLink.png\": 317,\n\t\"./S-task05_adjMatrix.png\": 318,\n\t\"./S-task05_nodeLink.png\": 319,\n\t\"./S-task06_adjMatrix.png\": 320,\n\t\"./S-task06_nodeLink.png\": 321,\n\t\"./S-task07_adjMatrix.png\": 322,\n\t\"./S-task07_nodeLink.png\": 323,\n\t\"./S-task08_adjMatrix.png\": 324,\n\t\"./S-task08_nodeLink.png\": 325,\n\t\"./S-task09_adjMatrix.png\": 326,\n\t\"./S-task09_nodeLink.png\": 327,\n\t\"./S-task10_adjMatrix.png\": 328,\n\t\"./S-task10_nodeLink.png\": 329,\n\t\"./S-task11_adjMatrix.png\": 330,\n\t\"./S-task11_nodeLink.png\": 331,\n\t\"./S-task12_adjMatrix.png\": 332,\n\t\"./S-task12_nodeLink.png\": 333,\n\t\"./S-task13_adjMatrix.png\": 334,\n\t\"./S-task13_nodeLink.png\": 335,\n\t\"./S-task14_adjMatrix.png\": 336,\n\t\"./S-task14_nodeLink.png\": 337,\n\t\"./S-task15_adjMatrix.png\": 338,\n\t\"./S-task15_nodeLink.png\": 339,\n\t\"./S-task16_adjMatrix.png\": 340,\n\t\"./S-task16_nodeLink.png\": 341\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 309;","module.exports = __webpack_public_path__ + \"static/media/S-task01_adjMatrix.596f3f16.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task01_nodeLink.9aabba82.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task02_adjMatrix.17795797.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task02_nodeLink.0f658255.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task03_adjMatrix.3efe1333.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task03_nodeLink.cabb8101.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task04_adjMatrix.f05a898c.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task04_nodeLink.921a839d.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task05_adjMatrix.dca03e38.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task05_nodeLink.a6bb33b2.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task06_adjMatrix.4c2ded02.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task06_nodeLink.814fb4ef.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task07_adjMatrix.ce25fd21.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task07_nodeLink.69f0ecbd.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task08_adjMatrix.04417e64.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task08_nodeLink.f3b42a5e.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task09_adjMatrix.7bf60f59.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task09_nodeLink.4204dd3a.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task10_adjMatrix.9ddb2123.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task10_nodeLink.a860a4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task11_adjMatrix.54e888d9.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task11_nodeLink.0ae4a7e8.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task12_adjMatrix.f17a7ce4.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task12_nodeLink.85a12057.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task13_adjMatrix.c32867ee.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task13_nodeLink.53d318fb.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task14_adjMatrix.e408facf.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task14_nodeLink.dadf2a19.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task15_adjMatrix.a494df59.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task15_nodeLink.6aa0bedb.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task16_adjMatrix.7362fb6e.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task16_nodeLink.8290467a.png\";","import mockAllData from \"./mockData.json\";\nlet local = true;\nlet host = local ? \"http://127.0.0.1:5000\" : \"http://18.222.101.54\";\n\nexport async function performPrefixSpan(data) {\n  console.log(\"postData is \", data);\n  console.log(\"data is \", data);\n  let res = await postData(host + \"/prefix\", data);\n  return res;\n}\n\nexport async function getDataFromServer() {\n  // let res = await postData(host + \"/data\");\n  console.log(\"dywootto\", mockAllData);\n  try {\n    console.log(mockAPICall(host + \"/data\", mockAllData));\n      // let res = await postData(host + \"/data\");\n\n    let res = await mockAPICall(host + \"/data\", mockAllData);\n    return res;\n  } catch (err) {\n    console.log(\"dywootto res\", err);\n  }\n}\nexport async function getSchema(tableID) {\n  let res = await getData(`${host}/table/${tableID}/schema`);\n  return res;\n}\nexport async function getTaskDataFromServer(taskID) {\n  let res = await getData(`${host}/data/task/${taskID}`);\n  return res;\n}\n\nexport async function mysql_api(endpoint, body) {\n  let res = await postData(host + endpoint, body);\n  return res;\n}\n\nexport async function postData(uri, postBody, fetchOptions) {\n  // console.log('postBody is ', postBody)\n  let defaultHeaders = {\n    url: uri,\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=UTF-8\",\n    },\n    body: JSON.stringify(postBody),\n  };\n  const val = await completePromise(uri, defaultHeaders);\n  console.log(\"dywootto\", val);\n  return val;\n}\n\nexport async function getData(uri, fetchOptions) {\n  let defaultHeaders = {\n    headers: {\n      Accept: \"application/json\",\n    },\n  };\n  return await completePromise(uri, defaultHeaders);\n}\n\nexport async function completePromise(uri, requestOptions) {\n  let response;\n  try {\n    response = await fetch(uri, requestOptions);\n    // console.log(response.text())\n    // console.log(\"inpromise\", response);\n    response.data = await response.json();\n    response.success = response.ok;\n  } catch (err) {\n    // console.log(response.text())\n\n    console.log(\"error\", err);\n    throw err;\n  }\n  return response;\n}\n//let res = await mockAPICall(\"www.example.com\", { work: \"yeah\" }); you can mock out api calls using this\n\nexport async function mockAPICall(\n  url,\n  returnData,\n  options = {\n    shouldError: false,\n    timeout: 2000,\n  }\n) {\n  console.log(\"in mockAPI\");\n\n  const { shouldError, timeout } = options;\n  console.log(\"in mockAPI\");\n  return await new Promise((resolution, rejection) => {\n    console.log(\"dywootto in promiser\");\n    setTimeout(() => {\n      if (shouldError) {\n        rejection({\n          url,\n          success: false,\n          error: `mockAPICall error`,\n        });\n      } else {\n        console.log(\"dywootto in res\", returnData, url);\n        resolution({\n          url,\n          success: true,\n          data: returnData,\n        });\n      }\n    }, timeout);\n  });\n}\n","import React, {\n    useState,\n    useEffect\n} from 'react';\n\nexport function useFetchAPIData(fetchingFunc, dependencies) {\n    const [isLoading, setIsLoading] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [fetchedData, setFetchedData] = useState(null);\n\n    const onLoadingStart = () => {\n        setIsLoading(true);\n        setErrorMessage(\"\");\n    };\n\n    const onError = (error) => {\n        setIsLoading(false);\n        setErrorMessage(error);\n    };\n\n    const onDataFetched = (data) => {\n        setFetchedData(data);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onLoadingStart();\n        fetchingFunc()\n            .then(\n                (result) => {\n                    const success = result && result.success;\n                    if (success && result.data) {\n                        //const fetchData = result && result.data;\n                        onDataFetched(result.data);\n                    } else {\n                        onError(`Error occured obtaining data from server`);\n                    }\n                },\n                (error) => {\n                    onError(`Error occured during data fetch ${error?.message}`);\n                }\n            )\n            .catch((error) => {\n                onError(`Error occured after data fetched ${error?.message}`);\n            });\n    }, [...dependencies]);\n    return [isLoading, errorMessage, fetchedData];\n}","import React, { useState, useEffect, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport initProvData from \"../common/data/provenance_summary.json\";\nimport prefixSpanSampleData from \"../common/data/prefix_span_sample_data.json\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport {\n  performPrefixSpan,\n  getDataFromServer,\n  getTaskDataFromServer,\n  mysql_api,\n} from \"../fetchers/fetchMocks.js\";\nimport { useFetchAPIData } from \"../hooks/hooks\";\nimport { ConsoleSqlOutlined } from \"@ant-design/icons\";\n\nimport eventData from \"../common/data/provenance_events.json\";\n\nconst ProvenanceDataContext = React.createContext({});\n\nexport const ProvenanceDataContextProvider = ({ children }) => {\n  // console.trace('calling provenanceDataContextProvider')\n  const [selectedTaskIds, setSelectedTaskIds] = React.useState([\"S-task01\"]);\n\n  const taskStructure = [\n    { name: \"Task 1\", key: \"S-task01\", prompt: \"\", actions: {}, stats: {} },\n    { name: \"Task 2\", key: \"S-task02\" },\n    { name: \"Task 3\", key: \"S-task03\" },\n    { name: \"Task 4\", key: \"S-task04\" },\n    { name: \"Task 5\", key: \"S-task05\" },\n    { name: \"Task 6\", key: \"S-task06\" },\n    { name: \"Task 7\", key: \"S-task07\" },\n    { name: \"Task 8\", key: \"S-task08\" },\n    { name: \"Task 9\", key: \"S-task09\" },\n    { name: \"Task 10\", key: \"S-task10\" },\n    { name: \"Task 11\", key: \"S-task11\" },\n    { name: \"Task 12\", key: \"S-task12\" },\n    { name: \"Task 13\", key: \"S-task13\" },\n    { name: \"Task 14\", key: \"S-task14\" },\n    { name: \"Task 15\", key: \"S-task15\" },\n    { name: \"Task 16\", key: \"S-task16\" },\n  ];\n\n  let [data, setData] = useState();\n  const [metrics,setMetrics] = React.useState()\n\n  let conditions; \n\n  if (data){\n    conditions = data.conditions;\n  }\n\n  let [homeTaskSort,setHomeTaskSort]=useState()\n\n\n  function handleProvenanceNodeClick(id) {\n    console.log(\"dywootto handle provenance node click\", id);\n\n    // hardcoded data for now. ideally, we'll have the event id to be able to select on.\n    const taskId = selectedTaskIds[0];\n    const participantId = \"545d6768fdf99b7f9fca24e3\";\n    const taskNumber = 1;\n    // select all of that provenance graph.\n    const promise = mysql_api(`/actions/${participantId}/${taskId}`);\n\n    promise.then((resolved) => {\n      console.log(\"resolvedclick\", resolved);\n      alert(`queried (skinny) provenance from db ${resolved.data}`);\n\n      // rehydrate provenance graph\n      // render vis using that provenance graph\n    });\n  }\n  // get initial data from server;\n  let [isLoading, isError, dataFromServer] = useFetchAPIData(async () => {\n    return await getDataFromServer();\n  }, []);\n  // console.log(isLoading, isError, dataFromServer);\n  /*[{\"_id\":\"startedProvenance\",\"actionID\":\"startedProvenance\",\"category\":\"Study\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0,\"id\":1,\"label\":\"Start Task\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:18 GMT\",\"type\":\"action\"},{\"_id\":\"Hard Selected A Node\",\"actionID\":\"Hard Selected a Node\",\"category\":\"Answer\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.283333,\"id\":2,\"label\":\"Select\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:35 GMT\",\"type\":\"action\"},{\"_id\":\"Hard Unselected A Node\",\"actionID\":\"Hard Unselected a Node\",\"category\":\"Answer\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.316667,\"id\":3,\"label\":\"Unselect\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:37 GMT\",\"type\":\"action\"},{\"_id\":\"Hard Selected A Node\",\"actionID\":\"Hard Selected a Node\",\"category\":\"Answer\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.45,\"id\":2,\"label\":\"Select\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:45 GMT\",\"type\":\"action\"},{\"_id\":\"Finished Task\",\"actionID\":\"Finished Task\",\"category\":\"Study\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.666667,\"id\":4,\"label\":\"Finish Task\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:58 GMT\",\"type\":\"action\"}]*/\n\n  useEffect(() => {\n    console.log(\"data from server\",dataFromServer);\n    setData(dataFromServer);\n    if (dataFromServer) {\n      setMetrics(dataFromServer.metrics)\n    }\n  }, [dataFromServer]);\n\n\n  //State\n  function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  const handleTagCreation = async (participantID, taskID, tag, action) => {\n    await timeout(200);\n\n    return tag;\n  };\n  let [taskSort, setTaskSort] = useState(\"name\");\n\n  /*const [allProvenanceData, setAllProvenanceData] = useState(() =>\n    processRawProvenanceData(initProvData)\n  );*/\n\n  const [currentTaskData, setCurrentTaskData] = React.useState([]);\n\n\n  let [\n    isTaskLoading,\n    isTaskError,\n    taskDataFromServer,\n  ] = useFetchAPIData(async () => {\n    const response = await getTaskDataFromServer(selectedTaskIds[0]);\n    response.data = response.data.map((datum) => {\n      // console.log(datum.sequence);\n      try {\n        datum.sequence = JSON.parse(`[${datum.sequence}]`);\n      } catch (err) {\n        console.error(\n          `[Provenance Data Context] Error Parsing ${datum.participantID}'s event sequence. This is likely caused by the sequence being > 16k characters.`\n        );\n        datum.sequence = [];\n      }\n      return datum;\n    });\n    return response;\n  }, [selectedTaskIds]);\n\n  useEffect(() => {\n    setCurrentTaskData(taskDataFromServer);\n  }, [taskDataFromServer]);\n\n\n\n  function handleChangeSelectedTaskId(event) {\n    setSelectedTaskIds([event.target.value]);\n  }\n\n  return (\n    <ProvenanceDataContext.Provider\n      value={{\n        currentTaskData,\n        taskStructure,\n        handleChangeSelectedTaskId,\n        selectedTaskIds,\n        data,\n        metrics,\n        setTaskSort,\n        homeTaskSort,\n        setHomeTaskSort,\n        conditions,\n        handleTagCreation,\n        handleProvenanceNodeClick,\n      }}>\n      {children}\n    </ProvenanceDataContext.Provider>\n  );\n};\n\nfunction calculateRelativeProvGraph(taskPerformance, maxTime) {\n  let totalTime =\n    new Date(taskPerformance.endTime) - new Date(taskPerformance.startTime);\n  let scale = maxTime / totalTime;\n  taskPerformance[\"totalTime\"] = totalTime;\n  taskPerformance[\"relativeStartTime\"] = 0;\n  taskPerformance[\"relativeStopTime\"] = 1 / scale;\n  if (taskPerformance[\"provenance\"]) {\n    taskPerformance[\"provenance\"] = taskPerformance[\"provenance\"].map(\n      (node) => {\n        node[\"percentTime\"] =\n          (new Date(node[\"time\"]) - new Date(taskPerformance[\"startTime\"])) /\n          totalTime;\n        node[\"relativeTime\"] = node[\"percentTime\"] / scale;\n\n        return node;\n      }\n    );\n  } else {\n    taskPerformance[\"provenance\"] = [];\n  }\n\n  return taskPerformance;\n}\nfunction processRawProvenanceData(unrelativeProvenanceData) {\n  //remove element with no data\n  unrelativeProvenanceData = unrelativeProvenanceData.filter(\n    (d) => Object.keys(d.data).length > 0\n  );\n\n  //remove elements with no, or messed up provenance (more than one started prov event)\n  unrelativeProvenanceData = unrelativeProvenanceData.filter((d) => {\n    let tasks = Object.keys(d.data).filter((t) => t.includes(\"task\"));\n\n    return tasks.reduce((acc, task) => {\n      if (!d.data[task].provenance) {\n        //participant has no provenance for a certain task.\n        return false;\n      } else {\n        //element has more than on 'startedProvenance' event in the same task.\n        return (\n          acc &&\n          d.data[task].provenance.filter((p) => p.event == \"startedProvenance\")\n            .length == 1\n        );\n      }\n    }, true);\n  });\n\n  // console.trace('calling process Raw prov data')\n  const taskIds = [\n    \"S-task01\",\n    \"S-task02\",\n    \"S-task03\",\n    \"S-task04\",\n    \"S-task05\",\n    \"S-task06\",\n    \"S-task07\",\n    \"S-task08\",\n    \"S-task09\",\n    \"S-task10\",\n    \"S-task11\",\n    \"S-task12\",\n    \"S-task13\",\n    \"S-task14\",\n    \"S-task15\",\n    \"S-task16\",\n  ];\n\n  const relativeProvenanceData = _.cloneDeep(unrelativeProvenanceData);\n\n  taskIds.forEach((taskId) => {\n    let longestTimeForTask = d3.max(unrelativeProvenanceData, (participant) => {\n      if (\n        participant.data &&\n        participant.data[taskId]?.startTime &&\n        participant.data[taskId]?.endTime\n      ) {\n        return (\n          new Date(participant.data[taskId].endTime) -\n          new Date(participant.data[taskId].startTime)\n        ); // minutes->seconds->ms\n      }\n      return 0;\n    });\n    // console.log(\"longest time\", longestTimeForTask);\n    unrelativeProvenanceData.forEach((participant, index) => {\n      if (participant.data && participant.data[taskId]) {\n        relativeProvenanceData[index].data[taskId] = calculateRelativeProvGraph(\n          participant.data[taskId],\n          longestTimeForTask\n        );\n        //create id field in each provenance event (that doesn't change with edits)\n        participant.data[taskId].provenance.map((p) => (p.id = p.event));\n      } else {\n        delete relativeProvenanceData[index][taskId];\n        // console.log(\"NO DATA\", relativeProvenanceData[index], taskId);\n      }\n    });\n  });\n\n  return relativeProvenanceData;\n}\n\nexport default ProvenanceDataContext;\n","import React from 'react';\nimport Add from \"@material-ui/icons/Add\";\nimport PanTool from \"@material-ui/icons/PanTool\";\nimport Sort from \"@material-ui/icons/Sort\";\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport Search from \"@material-ui/icons/Search\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Start from \"@material-ui/icons/Star\";\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n\nconst colors = [\"#c6e0d6\", \"#8fcab4\", \"#67aca9\", \"#5d83d2\", \"#6b56dd\", \"#9e93a1\"];\n// generated from https://leonardocolor.io/?colorKeys=%235b89d2%2C%235dbb9c%2C%23723ce7%2C%238e18b9&base=ffffff&ratios=1.4%2C1.64%2C2.12%2C2.80%2C3.71%2C4.88%2C6.35%2C9.00&mode=CAM02\nconst answerSelectColor = colors[0];\nconst dragColor = colors[1];\nconst sortColor = colors[2];\nconst selectColor = colors[3];\nconst searchColor = colors[4];\nconst clearColor = colors[5];\n\nconst eventMapping = {\n  custom: {\n    name: \"CustomIcon\",\n    color: \"#d1d1d1\",\n    icon: <CheckBoxOutlineBlankIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n\n  startedProvenance: {\n    name: \"PlayArrowIcon\",\n    color: \"#d1d1d1\",\n    icon: <PlayArrowIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"Finished Task\": {\n    name: \"StopIcon\",\n    color: \"#d1d1d1\",\n    icon: < StopIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n\n  answerBox: {\n    name: \"Add\",\n    color: answerSelectColor,\n    icon: < Add width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"Hard Selected a Node\": {\n    name: \"Add\",\n    color: answerSelectColor,\n\n    icon: < Add width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"Dragged Node\": {\n    name: \"PanTool\",\n    color: dragColor,\n    icon: < PanTool width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  sort: {\n    name: \"Sort\",\n    color: sortColor,\n    icon: < Sort width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  attrRow: {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"Hard Unselected a Node\": {\n    name: \"RadioButtonUncheckedIcon\",\n    color: answerSelectColor,\n    icon: < RadioButtonUncheckedIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"Select Node\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"rowLabel\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"colLabel\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"search\": {\n    name: \"Search\",\n    color: searchColor,\n    icon: < Search width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"Searched for Node\": {\n    name: \"Search\",\n    color: searchColor,\n    icon: < Search width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"cell\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"Unselect Node\": {\n    name: \"RadioButtonUncheckedIcon\",\n    color: selectColor,\n    icon: < RadioButtonUncheckedIcon width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"clear\": {\n    name: \"Clear\",\n    color: clearColor,\n    icon: < Clear width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  \"cleared all selected nodes\": {\n    name: \"Clear\",\n    color: clearColor,\n    icon: < Clear width={\n      16\n    }\n      height={\n        16\n      }\n    />\n  },\n  // \"startedProvenance\": {\n  //   name: \"Start\",\n  //   color: 'rgb(255,255,255)',\n  //   icon: < Start width={\n  //     16\n  //   }\n  //     height={\n  //       16\n  //     }\n  //   />\n  // },\n  // \"Finished Task\": {\n  //   name: \"Start\",\n  //   color: 'rgb(255,255,255)',\n  //   icon: < Start width={\n  //     16\n  //   }\n  //     height={\n  //       16\n  //     }\n  //   />\n  // }\n};\n\nexport default eventMapping;","//@ts-nocheck\nimport React from \"react\";\nimport eventMapping from \"./eventMapping.js\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fade from \"@material-ui/core/Fade\";\nimport styles from \"./ProvenanceIsolatedNodes.module.css\";\nconst ProvenanceIsolatedNodes = ({\n  nodes,\n  selectedItemId,\n  handleProvenanceNodeClick,\n}) => {\n  // console.log(\"dywootto\", nodes);\n  return (\n    <div\n      className={styles.wrapper}\n      style={{ display: \"flex\", flexDirection: \"row\" }}>\n      {nodes.map((node, index) => {\n        const opacity = node.id === selectedItemId ? 1 : 0.5;\n        return (\n          <div\n            key={index}\n            style={!!selectedItemId ? { opacity } : null}\n            onClick={() => handleProvenanceNodeClick(node)}>\n            <IsolatedNode node={node}></IsolatedNode>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst IsolatedNode = ({ node }) => {\n  let eventMap = eventMapping[node.name]\n    ? eventMapping[node.name]\n    : eventMapping[\"custom\"];\n  //add check for custom icons for newly created events;\n  const icon = eventMap.icon;\n\n  // node.event !== \"startedProvenance\" &&\n  //   node.event !== \"Finished Task\" ?\n  return (\n    <Tooltip\n      TransitionComponent={Fade}\n      TransitionProps={{ timeout: 600 }}\n      title={`${node.name} ${node.count ? `[${node.count}]` : \"\"}`}\n      PopperProps={{\n        popperOptions: {\n          modifiers: {\n            offset: {\n              enabled: true,\n              offset: \"0px, -6px\",\n            },\n          },\n        },\n      }}\n      arrow>\n      <svg width={34} height={34}>\n        <rect\n          x={0}\n          y={0}\n          width={30}\n          height={30}\n          rx={5}\n          fill={eventMap.color}\n          opacity={node.scale || 1}></rect>\n        <g transform={`translate(7,5)`}>{icon}</g>\n      </svg>\n    </Tooltip>\n  );\n  // : (\n  //   <div></div>\n  // );\n};\n\nexport default ProvenanceIsolatedNodes;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport TrendingFlatIcon from \"@material-ui/icons/TrendingFlat\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport Fab from '@material-ui/core/Fab';\n\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport SortIcon from '@material-ui/icons/Sort';\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\n// import * as PouchDB from 'pouchdb-browser';\n\nimport * as d3 from \"d3\";\n\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport ProvenanceIsolatedNodes from \"../components/ProvenanceIsolatedNodes\";\n\nimport Grid, { GridSpacing } from \"@material-ui/core/Grid\";\nimport { pathToFileURL } from \"url\";\nimport { keys } from \"mobx\";\nimport { Sort } from \"@material-ui/icons\";\n\nlet rowHeight = 300;\nlet figureWidth = 572;\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        padding: 10,\n      },\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    flexGrow: 1,\n  },\n  table: {\n    padding: \"10px\",\n  },\n  sortable:{\n    cursor:'pointer',\n    backgroundColor:'rgb(240,240,240)'\n  },\n  sorted:{\n    fill:'#5d83d2'\n  },\n  media: {\n    width: figureWidth,\n    height: rowHeight,\n    // border: '1px solid lightgray'\n  },\n  condition: {\n    fontSize: \"1em\",\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nvar groupBy = function (xs, key) {\n  return xs.reduce(function (rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nfunction scale(width, maxValue) {\n  return d3.scaleLinear().range([10, width]).domain([0, maxValue]);\n}\n\nconst accScale = scale(40, 1);\nconst timeScale = scale(40, 3.59);\n\n\n\n\n\nexport const BarChart = (props) => {\n  const { allData, hoveredRow, hoveredRowColor, metric, vert = false, size = { width: 150, height: 200 } } = props;\n\n  let data =  allData.find(\n    (m) => m.metric == metric\n  );\n  if (\n    data.type == \"text\" ||\n    data.type == \"longtext\"\n  ){\n  let width = vert ? size.width : 900;\n  let height = vert ? size.height : 80;\n\n\n  let maxBarHeight = vert ? 20 : height-10;\n\n\n  let varsToPlot = Object.entries(data.count).sort((a,b)=>a[1]>b[1] ? -1 : 1).slice(0,20)\n\n  \n\n  //compute scale for data;\n  let yDomain = varsToPlot.map(v=>v[0]);\n  let xDomain = d3.extent(varsToPlot.map(v=>v[1]));\n\n  let xScale = d3.scaleLinear().domain(xDomain).range([0, maxBarHeight]);\n   \n\n  let yScale =  d3.scaleBand()\n  .domain(yDomain)\n  .range([0, height])\n  .padding(0.65);\n\n  let barWidth = yScale.bandwidth();\n\n  let hoveredStats = hoveredRow ? hoveredRow.stats.find(m=>m.metric == metric ) : undefined\n  let hoveredVarsToPlot = hoveredStats ? Object.entries(hoveredStats.count).sort((a,b)=>a[1]>b[1] ? -1 : 1).slice(0,20) : []\n\n\n  if (!vert){\n    xDomain = varsToPlot.map(v=>v[0]);\n    yDomain = [0,d3.extent(varsToPlot.map(v=>v[1]))[1]];\n\n    yScale = d3.scaleLinear().domain(yDomain).range([15, maxBarHeight]);\n    \n\n    xScale =  d3.scaleBand()\n    .domain(xDomain)\n    .range([0, width])\n    .padding(0.5);\n\n    barWidth = xScale.bandwidth();\n  }\n\n    let nothingToPlot = varsToPlot.length < 1 ;\n    let transform = vert ? 'translate(100px,0px)' :  'translate(10px,20px)'\n  { return nothingToPlot ? null :  <svg width={width+10} height={height+20}>\n      {/* add axis */}\n      <g style={{transform: transform}}>\n      <line\n        x1={0}\n        y1={vert ? yScale.range()[0] : yScale.range()[1]}\n        x2={vert ? 0  : xScale.range()[1]}\n        y2={yScale.range()[1]}\n        style={{ stroke: \"rgb(0,0,0,0.25)\", strokeWidth: 1 }}></line>\n      {varsToPlot.map((entry) => {\n        let key = entry[0];\n        let value = entry[1]\n        let tooltipText = key + \" : \" + value;\n\n        let x = vert ? xScale(value)+5 : xScale(key)-3;\n        let y = vert ? yScale(key)-barWidth : height - yScale.range()[0] \n        return (\n          < React.Fragment key = {key}>\n            <Tooltip title={tooltipText}>\n              <rect\n                className=\"count\"\n                key={\"d_\" + key}\n                style={{ opacity: hoveredRowColor ? .5 : 1, fill: \"rgb(93, 131, 210)\" }}\n                x={vert ? 0 : xScale(key)}\n                y={vert ? yScale(key) : height - yScale.range()[0] - yScale(value)}\n                width={vert ? xScale(value) : barWidth}\n                height={vert ? barWidth : yScale(value)}></rect>\n            </Tooltip>\n            <Tooltip title={tooltipText}>\n              <text\n                style={{\n                  fontSize: \"1em\",\n                  textAnchor: \"start\",\n                  transform:\"translate(\" + x + \"px,\" + y + \"px) rotate(270deg)\"\n                }}\n               \n                x={0}\n                y={0}>\n                {\" \"}\n                {key}{\" \"}\n              </text>\n              </Tooltip>\n              {hoveredRowColor ? '' : <text\n              style={{\n                fontSize: \"1em\",\n                textAnchor: \"middle\",\n              }}\n              x={ vert ? -5 : xScale(key)+barWidth/2}\n              y={vert ? yScale(key)-barWidth : height - yScale.range()[0] - yScale(value)-2}>\n                {\" \"}\n                {value}{\" \"}\n              </text>}\n           \n              </React.Fragment>\n        );\n      })}\n\n    {/* //Only plot hoveredVars that are in the original top 20 to keep the distribution of bars the same */}\n    {hoveredVarsToPlot.filter(d=>xScale(d[0])).map((entry) => {\n        let key = entry[0];\n        let value = entry[1]\n        let tooltipText = key + \" : \" + value;\n\n        let x = vert ? xScale(value)+5 : xScale(key)-3;\n        let y = vert ? yScale(key)-barWidth : height - yScale.range()[0] \n        return (\n          <React.Fragment key={'hovered' + key}>\n            <Tooltip title={tooltipText}>\n              <rect\n                className=\"count\"\n                key={\"d_\" + key}\n                style={{ fill: hoveredRowColor }}\n                x={vert ? 0 : xScale(key)}\n                y={vert ? yScale(key) : height - yScale.range()[0] - yScale(value)}\n                width={vert ? xScale(value) : barWidth}\n                height={vert ? barWidth : yScale(value)}></rect>\n            </Tooltip>\n          \n              <text\n              style={{\n                fontSize: \"1em\",\n                textAnchor: \"middle\",\n              }}\n              x={ vert ? -5 : xScale(key)+barWidth/2}\n              y={vert ? yScale(key)-barWidth : height - yScale.range()[0] - yScale(value)-2}>\n                {\" \"}\n                {value}{\" \"}\n              </text>\n           \n              </React.Fragment>\n        );\n      })}\n      </g>\n    </svg>\n  }\n  ;\n\n  }\n\n  return null\n\n  \n};\n\n{\n  /* <>{[0, 1, 2,3,4].map(i => {\n                                  let frequentActions = freqPattern[i].seq.map(a => ({ event: a, id: a, count: freqPattern[i].count, scale: colorScale(freqPattern[i].count) })) //actions.filter(a => a.taskID == task.taskID && a.condition == condition).splice(0, 5).map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) }))\n                                  return <>\n                                    <Box style={{ display: 'block' }} >\n                                      <Box  mb={\"6px\"} style={{ display: 'inline-block', width: 100 }}>\n\n                                        <svg width={100} height={34}>\n                                        <rect x={100-countScale(freqPattern[i].count)} y={0} width={countScale(freqPattern[i].count)} height={30} style={{fill: 'rgb(147 195 209)', 'stroke':'white', strokeWidth:'8px' }}></rect>\n                                        <text x={90} y={20} style={{'fontWeight':'bold','textAnchor':'end'}}>{freqPattern[i].count}</text>\n\n                                        </svg>\n                                      </Box>\n                                      <Box mt={\"5px\"} mb={\"6px\"} style={{ display: 'inline-block', width: 300 }}>\n                                        <ProvenanceIsolatedNodes\n                                          key={task.taskID}\n                                          nodes={\n                                            frequentActions\n                                          }></ProvenanceIsolatedNodes>\n                                      </Box>\n                                    </Box>\n                                  </>\n                                }\n                                )}\n                                </> */\n}\nlet countScale = d3.scaleLinear().range([0, 75]).domain([0, 137]);\n\nfunction Stimulus({taskID,conditionName,classes}){\n  // console.log('am rerendering')\n  return  <><Box mt={\"5px\"} mb={\"6px\"} mr={\"10px\"} boxShadow={1}>\n  <CardMedia\n    style={{ display: \"inline-block\" }}\n    className={classes.media}\n    component=\"img\"\n    image={require(\"../static/taskImages/\" +\n      taskID +\n      \"_\" +\n      conditionName +\n      \".png\")}\n    // image=\"https://placekitten.com/g/100/100\"\n    title=\"Task 1 AM\"\n  />\n</Box>\n<Typography\n  className={classes.pos}\n  variant=\"overline\"\n  color=\"primary\">\n  Stimulus\n</Typography>\n</>\n}\n\n//Compoment to draw participant counts for each interaction sequence\nfunction SequenceCount({row,hoveredRow,hoveredRowColor}){\n  let total = 137;\n  let height =25;\n  let iconWidth = 3;\n  let padding = 1;\n  let numIconsPerCol = Math.floor(height/(iconWidth+padding))\n  let numCols = Math.ceil(total/numIconsPerCol)\n  let width = numCols*(iconWidth+padding) \n\n  let textWidth = 25\n\n  let xScale = d3.scaleLinear().range([0,iconWidth+padding]).domain([0,1])\n  let yScale = d3.scaleLinear().range([0,height]).domain([0,numIconsPerCol])\n\n  let currentParticipants = row.matchingSequences.map(s=>s.participantID)\n  let hoveredParticipants = hoveredRow ? hoveredRow.matchingSequences.map(s=>s.participantID) : []\n\n  let intersection = currentParticipants.filter(x => hoveredParticipants.includes(x));\n  \n\n  // width = countScale.range()[1]\n\n  return  <svg width={width+textWidth} height={height}>\n  {Array.from(Array(total).keys()).map(key=>{\n    return <rect key={key}\n    x={xScale(Math.floor(key/numIconsPerCol))}\n    y={yScale(key%numIconsPerCol)+padding}\n    width={iconWidth}\n    height={iconWidth}\n    style={{\n      // opacity: key < intersection.length ? 1 : .2,\n      fill: key < intersection.length ? hoveredRowColor : key < row.count ? \"rgb(150, 150, 150)\" :  'rgb(220, 220, 220)'  //rgb(147 195 209)\n    }}></rect>\n  })} \n  \n  <text\n    x={xScale(numCols)+padding}\n    y={yScale(numIconsPerCol/2)}\n    style={{ fontWeight: \"bold\", alignmentBaseline:'middle', textAnchor: \"start\" ,'fill':'rgb(93, 131, 210)' }}>\n    {row.count}\n  </text>\n  \n  \n \n  {/* <rect\n    x={0}\n    y={0}\n    width={countScale(137)}\n    height={20}\n    style={{\n      fill: \"rgb(220, 220, 220)\"\n    }}></rect>\n\n<rect\n    x={0}\n    y={0}\n    width={countScale(row.count)}\n    height={20}\n    style={{\n      fill: \"rgb(93, 131, 210)\"\n    }}></rect>\n\n<text\n    x={countScale(137)+padding}\n    y={10}\n    style={{ fontWeight: \"bold\", alignmentBaseline:'middle', textAnchor: \"start\" ,'fill':'rgb(93, 131, 210)' }}>\n    {row.count}\n  </text> */}\n  \n  \n</svg>\n}\n\nfunction SortIconContainer({sorted,classes}){\n  let size = 20;\n  return <svg width={size} height={size} style={{paddingTop:'5px'}}>\n    <SortIcon className = {sorted ? classes.sorted : ''} style={{transform: \"rotate(-180deg)\"}}  width={size} height={size} /></svg>\n}\n\n//Compoment to draw interaction sequence tables\nfunction TableComponent({rows,hoveredRowColor, hoveredRow=undefined,setHoveredRow=undefined}){  \n// console.log('rendering table',hoveredRow) \n  // console.log(rows)\n\n  const classes = useStyles();\n\n\n  let [sort,setSort]=useState({value:'Count',desc:{'Count':true,'Pattern':true}})\n\n  // useEffect()({\n    rows.sort((a,b)=>{\n      let aValue = sort.value == 'Count' ? a.count : a.seq.length;\n      let bValue = sort.value == 'Count' ? b.count : b.seq.length;\n      let rValue = sort.desc[sort.value] ? -1 : 1\n      return aValue > bValue ? rValue : -rValue\n    })\n  // },[])\n  \n  // console.log(rows)\n  return (\n    <MuiThemeProvider theme={theme}>\n      <TableContainer style={{ maxHeight:'300px'}}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n    <TableRow>\n      {[{key:'Pattern',title:'Interaction Pattern'},{key:'Count',title:'Participant Count'}].map(header=>{\n              return <TableCell  key = {header['key']} onClick={ () =>{\n                sort =  { ...sort }; \n                let sameKey = sort.value == header.key;\n                sort.value  = header.key; \n                sort.desc[header.key] =  sameKey ? !sort.desc[header.key] : true; \n                setSort(sort);\n              \n              }}  className={classes.sortable}> {header.title}<SortIconContainer classes = {classes} sorted={sort.value == header.key}></SortIconContainer></TableCell>\n      })}\n    </TableRow>\n  </TableHead>\n          <TableBody>\n            {rows.map((row, i) => {\n              // console.log('row',row)\n              return (\n              <TableRow key={row.id} onMouseEnter={() =>{setHoveredRow(row)}} onMouseLeave={() => setHoveredRow()} style={{background: hoveredRow == row? 'rgb(245,245,245)':'white'}} >\n                  <TableCell\n                    component=\"th\"\n                    scope=\"row\"\n                    style={{ width:'300px', padding: \"10px\"}}>\n                    {row.seq ? (\n                      <ProvenanceIsolatedNodes\n                        // key={}\n                        nodes={row.seqObj} selectedItemId = {undefined} handleProvenanceNodeClick={()=>{}}></ProvenanceIsolatedNodes>\n                    ) : (\n                      row.answer\n                    )}\n                  </TableCell>\n                  {row.seq ? (\n                    <TableCell align=\"left\">\n                     <SequenceCount row = {row} hoveredRow = {hoveredRow} hoveredRowColor = {hoveredRowColor}></SequenceCount>\n                    </TableCell>\n                  ) : (\n                    <></>\n                  )}\n                  {/* <TableCell  component=\"th\" scope=\"row\" style={{padding:'10px'}}>\n          {row.seq? <Histogram data={value} ci={value.ci} />: <></>}\n        </TableCell> */}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MuiThemeProvider>\n  );\n}\n\n// Compoment for single metric histogram\nfunction Histogram({data,hoveredRow,metric,hoveredRowColor}){\n  // let hoveredStats = undefined; \n  // let hoveredCI = undefined;\n  let value = data.find(\n    (m) => m.metric == metric\n  );\n  if (\n    value.type == \"int\" ||\n    value.type == \"float\"\n  ) {\n\n    let hoveredStats = hoveredRow ? hoveredRow.stats.find(m=>m.metric == metric ) : undefined;\n    let hoveredCI = hoveredStats ? hoveredStats.ci : undefined;\n    return (\n      <Grid key={metric+ '_hist'} item>\n        {<DrawHistogram hoveredRowColor={hoveredRowColor} data={hoveredStats || value} ci={hoveredCI ||  value.ci} />}\n        <Typography\n          style={{ display: \"block\" }}\n          color=\"primary\"\n          variant=\"overline\">\n          {metric}\n        </Typography>\n      </Grid>\n    );\n  }\n  // if (value.type == \"text\") {\n  //   return (\n  //     <Grid key={metric+'_bar'} item>\n  //       <BarChart data={value}></BarChart>\n  //       <Typography\n  //         style={{ display: \"block\" }}\n  //         color=\"primary\"\n  //         variant=\"overline\">\n  //         {metric}\n  //       </Typography>\n  //     </Grid>\n  //   );\n  // }\n  return <></>;\n\n}\n\n\nexport const DrawHistogram = (props) => {\n\n  const { data, hoveredRowColor, ci, size = { width: 100, height: 40 } } = props;\n\n  let[hovered,setHovered]=useState(false)\n\n  let menu = function () {\n    return <><rect\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      rx={5}\n      fill={'white'}\n      opacity={.5}></rect>\n\n\n      <g transform={`translate(0,0)`}>{<SortIcon width={\n        16\n      }\n        height={\n          16\n        } />}\n        <text x={20} y={10}>Sort</text>\n      </g>\n\n    </>\n  }\n\n  let average = ci[0];\n  let lowerBound = ci[1];\n  let upperBound = ci[2];\n\n  let width = size.width;\n  let height = size.height;\n\n  let barHeight = 20;\n  let barPadding = 2;\n  //compute scale for data;\n  let xDomain = d3.extent(data.bins);\n  let yDomain = d3.extent(data.hist);\n\n  let xScale = d3\n    .scaleLinear()\n    .domain(xDomain)\n    .range([10, width - 40]);\n\n  let yScale = d3.scaleLinear().domain(yDomain).range([0, barHeight]);\n\n  let barWidth = xScale(data.bins[1]) - xScale(data.bins[0]) - barPadding;\n\n  let textLabel = Math.round(average * 10) / 10; //label == '%' ? (Math.round(average * 100) + ' ' + label) : Math.round(average * 10) / 10 + ' ' + label\n  \n  \n  return (<>\n    <svg style={{transform:'translate(-10px,0px)'}} width={width} height={height} onMouseEnter={() => setHovered(true)} onMouseLeave={() => setHovered(false)}>\n      <g transform = {'translate(10,0)'}><line\n        x1={0}\n        y1={yScale.range()[1]}\n        x2={xScale.range()[1]}\n        y2={yScale.range()[1]}\n        style={{ stroke: \"rgb(0,0,0,0.25)\", strokeWidth: 1 }}></line>\n        {data.hist.map((d, i) => (\n          <rect\n            className=\"count\"\n            key={\"d_\" + data.bins[i]}\n            style={{ fill: hoveredRowColor || \"rgb(93, 131, 210)\" }}\n            x={xScale(data.bins[i]) + barPadding / 2}\n            y={barHeight - yScale(d)}\n            width={barWidth}\n            height={yScale(d)}></rect>\n        ))}\n        <circle\n          className=\"count\"\n          style={{ fill: \"#ff5e00\", opacity: 1 }}\n          cx={xScale(average)}\n          cy={yScale.range()[1] / 2}\n          r={5}></circle>\n\n        <line\n          className=\"count\"\n          style={{ stroke: \"black\", strokeWidth: 2, opacity: 0.5 }}\n          x1={xScale(lowerBound)}\n          x2={xScale(upperBound)}\n          y1={yScale.range()[1] / 2}\n          y2={yScale.range()[1] / 2}></line>\n\n<text\n          style={{ fontSize: \"1em\", textAnchor: \"middle\" }}\n          x={xScale(average)}\n          y={40}>\n          {\" \"}\n          {textLabel}{\" \"}\n        </text>\n   \n      \n      {hovered ? <>\n      \n        <text\n          style={{ fill:'rgb(0,0,0,0.25)', fontSize: \"1em\", textAnchor: \"end\" }}\n          x={-2}\n          y={23}>\n          {\" \"}\n          {Math.floor(xScale.domain()[0])}{\" \"}\n        </text>\n        <text\n          style={{ fill: 'rgb(0,0,0,0.25)' ,fontSize: \"1em\", textAnchor: \"start\" }}\n          x={xScale.range()[1]+2}\n          y={23}>\n          {\" \"}\n          {Math.ceil(xScale.domain()[1])}{\" \"}\n        </text>\n      \n      </> : null}\n      </g>\n    </svg>\n  </>\n\n  );\n};\n\n//Compoment for the card for a single Condition\nfunction ConditionCard({ condition, conditionName, classes, taskID }) {\n  \n  //Keeps track of which rows in the table are hovered on\n  const [hoveredRow, setHoveredRow] = useState();\n  let[hidden,setHidden]=useState(false)\n\n\n  let hoveredRowColor =  '#f59c3d' // '#9100e6'; \n  let freqPattern, data, metricValues;\n\n  //only compute when the condition changes\n  // useEffect(() => {\n    // console.log('calling use effect')\n    freqPattern = condition.patterns[0].topK;\n    data = condition.stats;\n\n    metricValues = [...new Set(data.map((m) => m.metric))]; \n\n    freqPattern.map((action,i) => {\n      action.id = i;\n      action.seqObj = action.seq.map(a => ({ name: a, id: a, count: action.count }))\n      return action\n    }) \n\n  // }, [condition]);\n\n  // console.log(metricValues)\n  return (!metricValues ? <></> :\n    <React.Fragment key={\"ConditionCard_\" + conditionName}>\n      <Typography  onClick={()=>{setHidden(!hidden)}} style={{ cursor:'pointer' }} className={classes.condition} variant=\"overline\">\n        {conditionName}\n      </Typography>\n      {hidden ? <></> :<Grid container className={classes.root} spacing={2}>\n        <Grid item xs={12}>\n          <Grid container justify=\"flex-start\" spacing={2}>\n            <Grid key={\"cat\"} item>\n              <Stimulus taskID={taskID} classes={classes} conditionName={conditionName}></Stimulus>\n            </Grid>\n            <Grid key={\"prov\"} item>\n              <Box height={rowHeight} width={600} mt={\"5px\"} mb={\"6px\"} mr={'10px'} boxShadow={0} style={{ overflow: 'scroll' }}>\n                {<TableComponent rows={freqPattern} hoveredRow={hoveredRow} hoveredRowColor = {hoveredRow ? hoveredRowColor : undefined} setHoveredRow={setHoveredRow}></TableComponent>}\n              </Box>\n              <Typography\n                className={classes.pos}\n                variant=\"overline\"\n                color=\"primary\">\n                Actions\n              </Typography>\n            </Grid>\n            <Grid key={'performanceMetrics'} item xs>\n              <Grid key={'performanceMetrics'} item style={{ display: 'block' }}>\n                <Box height={rowHeight / 2.5} p={\"20px\"} mt={\"5px\"} mb={\"6px\"} mr={'10px'} style={{ overflow: 'scroll', display: 'inline-flex' }} boxShadow={1}>\n                  {metricValues.map((metric) => {\n                    return <Histogram key={metric} data = {data} hoveredRow={hoveredRow} hoveredRowColor = {hoveredRow ? hoveredRowColor : undefined} metric={metric}></Histogram>\n                  })}\n                </Box>\n                <Typography\n                  className={classes.pos}\n                  variant=\"overline\"\n                  color=\"primary\"\n                  style={{ display: \"block\" }}>\n                  Performance Metrics\n                </Typography>\n              </Grid>\n\n              <Grid key={\"qualData\"} item xs>\n                <Box\n                  height={rowHeight / 2.5}\n                  width={1}\n                  mt={\"5px\"}\n                  mb={\"6px\"}\n                  mr={\"10px\"}\n                  boxShadow={1}\n                  style={{ overflow: \"scroll\" }}>\n                     {metricValues.map((metric) => {\n                    return <BarChart key = {metric} allData = {data} hoveredRow={hoveredRow} hoveredRowColor = {hoveredRow ? hoveredRowColor : undefined} metric={metric}></BarChart>\n                  })}\n                  {/* <TableComponent rows={condition.textAnswers}></TableComponent> */}\n                </Box>\n                <Typography\n                  className={classes.pos}\n                  variant=\"overline\"\n                  color=\"primary\">\n                  Word Counts for Qualitative Responses\n                </Typography>\n              </Grid>\n            </Grid>\n      \n\n            {/* {condition.textAnswers.map(txt=>{\n              return <List dense={true}>\n              <ListItem>\n                <ListItemText\n                  primary={txt.answer}\n                  secondary={null}\n                />\n              </ListItem>\n          </List>\n            })} */}\n          </Grid>\n        </Grid>\n      </Grid>\n}\n      <Divider />\n    </React.Fragment>\n  );\n}\n\nfunction TaskCard({task,classes}){\n\n  let[hidden,setHidden]=useState(false)\n\n  return <Box\n  m={2}\n  key={\"box_\" + task.taskID}\n  // style={{ display: \"inline-block\" }}\n>\n  {/* style={{ 'width': 600 }}  */}\n  <Card className={classes.root} key={task.taskID}>\n    <CardContent>\n      <Typography\n        variant=\"h5\"\n        component=\"h2\"\n        onClick={()=>{setHidden(!hidden)}}\n        style={{ cursor:'pointer', display: \"inline-block\" }}>\n        {task.name}\n      </Typography>\n      {/* <Tooltip title={taskTooltip}> */}\n      <Typography\n        className={classes.pos}\n        color=\"textSecondary\"\n        style={{ display: \"inline-block\", marginLeft: \"10px\" }}>\n        {task.prompt + \"  [\" + task.answer + \"]\"}\n      </Typography>\n      <Divider />\n\n      {hidden ? <></> : Object.keys(task.conditions).map((cKey) => {\n        let condition = task.conditions[cKey];\n        return (\n          <ConditionCard\n            key = {task.taskID + cKey}\n            condition={condition}\n            conditionName={cKey}\n            taskID={task.taskID}\n            classes={classes}></ConditionCard>\n        );\n      })\n      \n      }\n    </CardContent>\n      {hidden ? <></> :\n    <CardActions>\n      <Button size=\"small\">Explore</Button>\n    </CardActions>\n      }\n  </Card>\n</Box>\n\n}\n\nexport default function TaskContainer() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const { data, homeTaskSort } = useContext(ProvenanceDataContext);\n\n  // console.log('homeTaskSort is ', homeTaskSort)\n \n  function getValues(task,conditionFilter,sortKey){\n    let conditions = Object.keys(task.conditions);\n    let values = []\n    conditions.map(c=>{\n      if (conditionFilter[c]){\n        let metricValues = task.conditions[c].stats.find(s=>s.metric == sortKey)\n        values.push(metricValues.ci[1]) //average for that metric\n      }\n    })\n    return values;\n\n  }\n  if (data){\n    // console.log(data.tasks)\n    \n    if (homeTaskSort){\n\n      let sortKey = homeTaskSort.metric;\n      let desc = homeTaskSort.desc\n      let conditionFilter = homeTaskSort.conditions\n\n      \n      data.tasks.sort((a,b)=>{\n        \n        let aValue, bValue; \n        if (sortKey == 'name'){\n          aValue = a[sortKey]\n          bValue = b[sortKey]\n        } else {\n          let aValues = getValues(a,conditionFilter,sortKey)\n          let bValues = getValues(b,conditionFilter,sortKey)\n          aValue = desc? Math.max(...aValues) : Math.min(...aValues)\n          bValue = desc? Math.max(...bValues) : Math.min(...bValues)\n        }\n\n        let rValue = desc ? -1 : 1\n        return aValue > bValue ? rValue : -rValue\n    })\n\n    console.log('done sorting')\n\n  }}\n\n  // })\n  let colorScale = d3\n    .scaleLinear()\n    // .domain(d3.extent(allCounts))\n    .domain([0, 800])\n    .range([0.3, 1]);\n\n  //Only render when all API calls have returned\n  let ready = data;\n  // console.log('actions', actions)\n  return ready == undefined ? (\n    <></>\n  ) : (\n    <>\n      {data.tasks.map((task) => {\n        // let taskTooltip = <Typography>{task.prompt}</Typography>;\n        return (<TaskCard key = {task.name} task={task} classes={classes}></TaskCard>);\n      })}\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\nimport Divider from '@material-ui/core/Divider';\n\nimport * as labella from \"labella\"\n\nimport { List } from 'react-virtualized';\n\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\n// import * as PouchDB from 'pouchdb-browser';\n\n\nimport * as d3 from \"d3\";\n\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport ProvenanceIsolatedNodes from \"../components/ProvenanceIsolatedNodes\";\n\nimport Grid, { GridSpacing } from '@material-ui/core/Grid';\nimport { pathToFileURL } from \"url\";\nimport { keys } from \"mobx\";\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        flexGrow: 1\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    }\n});\n\nvar groupBy = function (xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\n\n\nfunction scale(width, maxValue) {\n    return d3\n        .scaleLinear()\n        .range([10, width])\n        .domain([0, maxValue]);\n}\n\nlet xDomain, yDomain, categories;\n\n\nexport default function StudyCard() {\n    const classes = useStyles();\n    const bull = <span className={classes.bullet}>•</span>;\n    const { data } = useContext(ProvenanceDataContext);\n\n    function eventMap(eventData, size = { width: 130, height: 30 }) {\n\n        let width = size.width;\n        let height = size.height;\n\n        let xScale = d3.scaleLinear().domain([0, xDomain[1]]).range([0, width - 40])\n        let yScale = d3.scaleLinear().domain(yDomain).range([height, 0])\n\n        //metrics to plot in each task label\n        let metrics = ['accuracy', 'difficulty', 'confidence']\n\n\n        // let barHeight = 20;\n        let barPadding = 2;\n        let metricSquare = 8;\n        let barHeight = 16\n        let labelHeight = 15\n        let textWidth = 30;\n        let labelWidth = textWidth + metrics.length * (metricSquare + barPadding) + textWidth  + barPadding\n        let axisHeight = yScale.range()[0] + barHeight + 3\n\n        //compute scale for data; \n        // let xDomain = d3.extent(data, d => d.elapsedTime);\n        // let yDomain = d3.extent(data, d => d.level);\n        // let colors = [\"rgb(96, 201, 110)\", \"rgb(0, 191, 128)\", \"rgb(0, 180, 147)\", \"rgb(0, 167, 165)\", \"rgb(0, 153, 179)\", \"rgb(0, 138, 188)\", \"rgb(0, 122, 189)\", \"rgb(0, 104, 182)\", \"rgb(42, 85, 168)\", \"rgb(77, 65, 147)\"]\n        let colors = [\"rgb(0, 153, 179)\", \"rgb(0, 138, 188)\", \"rgb(0, 122, 189)\", \"rgb(0, 104, 182)\", \"rgb(42, 85, 168)\", \"rgb(77, 65, 147)\"]\n        // let colors = [ \"#e6f598\", \"#abdda4\", \"#66c2a5\", \"#3288bd\", \"#5e4fa2\", \"#9e0142\", \"#d53e4f\", \"#f46d43\", \"#fdae61\",\"#fee08b\", \"#ffffbf\", ]\n       \n        let colorScale = d3.scaleOrdinal(colors).domain(categories);\n\n        let color = function (d) {\n            return (d.eventID == 'task' ? 'rgba(171,171,171,0.5)' : d.eventID == 'browse away' ? 'black' : colorScale(d.category))\n        }\n\n        let hoverFill = function (d) {\n            return (d.uniqueID == hoveredElement ? '#ff5800' : 'rgba(171, 171, 171, 0.5)')\n        }\n\n        let maxTime = Math.max(...eventData.map(d => d.elapsedTime + d.duration))\n        let phases = eventData.filter(d => d.level == 0)\n\n        var filteredData = eventData.filter(d => d.eventID == 'task' && d.category == 'Study' && d.taskID && d.taskID.includes('S-task')).sort((a, b) => a.elapsedTime > b.elapsedTime ? 1 : - 1);\n    \n        //compute y position for labels\n        let y = 1;\n        let labelPos = [];\n\n        let nodes = filteredData.map(d => {\n            let labelStart = xScale(d.elapsedTime)\n            let labelExtent = xScale(d.elapsedTime) + labelWidth + 8;\n            let level = labelPos.find(p => p.x < labelStart);\n            let n = {};\n            n['data'] = d;\n            if (!level) {\n                y = y + 1;\n                labelPos.push({ y, x: labelExtent, label: d.shortName })\n                n['y'] = y;\n            } else {\n                n['y'] = level.y\n                labelPos = labelPos.filter(p => p.y !== level.y);\n                labelPos.push({ y: level.y, x: labelExtent, label: d.shortName })\n                labelPos.sort((a, b) => a.y < b.y ? -1 : 1)\n            }\n            n['labelWidth'] = labelWidth\n            return n;\n        })\n\n        let metricColorScales={}; //one color scale per metric\n        let metricYScales={} // one y scale per metric\n        let taskTimeScales = {} // one time scale per task (depending on the range of completion times)\n\n        let colorRange = [\"#e6550d\", \"#3182bd\"];\n        let heightRange = [barPadding, labelHeight - barPadding]\n        let timeScaleRange = [barPadding, textWidth-2*barPadding];\n\n \n        let getStats = function(taskID,condition,metric){\n            let taskInfo = data.tasks.find(dd => dd.taskID == taskID);\n            let out = {}\n            if (taskInfo) {\n                let stats = taskInfo.conditions[condition.trim()].stats.find(t => t.metric == metric);\n                out['average'] = stats.ci[0];\n                out['lowerBound'] = stats.ci[1];\n                out['upperBound'] = stats.ci[2];\n                out['min'] =stats.min;\n                out['max'] = stats.max;\n            }\n            return out\n        }\n\n        //get stats for all metrics to be displayed in the label plus time. \n        nodes.map(n=>{\n            n.data.stats={}\n            metrics.map(metric=>{\n                n.data.stats[metric] = getStats(n.data.taskID,n.data.condition,metric)\n            })\n            n.data.stats['time'] = getStats(n.data.taskID,n.data.condition,'time')\n        })\n\n        metrics.map(metric => {\n            //create metric scales for color and height of bars\n            metricColorScales[metric] = d3.scaleLinear().range(colorRange).domain(data.metrics[metric])\n            metricYScales[metric] = d3.scaleLinear().range(heightRange).domain(data.metrics[metric])\n        })\n\n        data.taskList.map(task => {\n            data.conditions.map(condition => {\n                let stats = getStats(task, condition, 'time')\n                //WARNING, right now setting a single range for time, regardless of task/condtion since the backend returns a common scale for all metrics\n                taskTimeScales[task] = d3.scaleLinear().range(timeScaleRange).domain([stats['min'], stats['max']])\n            })\n        })\n\n        // console.log(nodes)\n        // console.log('nodePos',labelPos)\n\n\n        return (\n            <svg width={width} height={300} >\n                {/* add axis */}\n                {/* {console.log(data.map(d=>d.elapsedTime), Math.max(...data.map(d=>d.elapsedTime)))} */}\n                <g style={{ \"transform\": \"translate(0px, 200px)\" }}>\n                    {/* <line x1={0} y1={axisHeight} x2={xScale(maxTime) + 5} y2={axisHeight} style={{ \"stroke\": \"rgb(0,0,0,0.25)\", \"strokeWidth\": 1 }}></line> */}\n                    {eventData.map((d, i) => {\n                        let rectWidth = (xScale(d.duration) > 5) ? xScale(d.duration) - barPadding : xScale(d.duration)\n\n                        let barComponent = <React.Fragment key={d.participantID + '_' + Math.random()}>\n                            {/* <Tooltip title={(d.eventID == 'task' ? d.taskID : d.eventID) + \" [\" + d.duration + ' / ' + d.accuracy + \"]\"}> */}\n                            <rect className='count' key={'d_' + d.eventID + '_' + d.elapsedTime} onMouseOver={() => hovered(d)} onMouseOut={() => setHovered(undefined)} style={{ fill: color(d), opacity: (d.eventID == 'task' ? .8 : .6) }} // \"rgb(93, 131, 210)\"\n                                x={xScale(d.elapsedTime) + barPadding}\n                                y={yScale(d.level)}\n                                width={rectWidth}\n                                height={d.eventID == 'task' ? barHeight : barHeight / 2}></rect>\n\n\n                            {/* </Tooltip> */}\n\n                        </React.Fragment>\n\n                        //  console.log('taskInfo', taskInfo)\n\n                        return barComponent\n                    }\n\n                    )}\n\n                    {nodes.map(n => <line x1={xScale(n.data.elapsedTime) + barPadding} y1={yScale(n.data.level) + 15} x2={xScale(n.data.elapsedTime) + barPadding} y2={yScale(n.y)+labelHeight} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '.8px'}}></line>)}\n\n                    {nodes.map(n => {\n                        let ciPlot, background;\n\n                        let timeScale = taskTimeScales[n.data.taskID];\n\n                        let label = <g style={{ \"transform\": \"translate(\" + (xScale(n.data.elapsedTime)+barPadding) + \"px, \" + (yScale(n.y)) + \"px)\" }}>\n                        <rect className='count' key={'background_' + n.data.eventID} style={{ fill: 'rgb(245,245,245)' }}\n                                x={0}\n                                y={0}\n                                width={labelWidth}\n                                height={labelHeight}></rect>\n\n                            <line x1={0} y1={labelHeight} x2={n.labelWidth} y2={labelHeight} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '.8px' }}></line>\n\n                            <text\n                                style={{ fontSize: \".75em\", fontWeight:'bold', textAnchor: \"start\", fill: 'rgb(90,90,90)', alignmentBaseline: \"hanging\" }}\n                                x={barPadding*2}\n                                y={barPadding}>\n                                {\" \"}\n                                {n.data.shortName}{\" \"}\n                            </text>\n                        </g>\n\n                        if (Object.keys(n.data.stats).includes('time')) {\n                            let plotHeight  = yScale(n.y) + barHeight\n                            let maxWidth = Math.max(xScale(n.data.duration) + barPadding, xScale(n.data.upperBound));\n\n                            let avg = n.data.stats['time'].average\n                            let slower = avg < n.data.duration;\n                            let minTime = Math.min(avg,n.data.duration)\n                            let diff = Math.abs(avg - n.data.duration)\n\n                            let timePadding = 2;\n                            let glyphSize = 4;\n                            let lineHeight = 2;\n\n                            ciPlot = <g style={{ \"transform\": \"translate(\" + (xScale(n.data.elapsedTime) + (labelWidth - textWidth) + barPadding) + \"px, \" + (yScale(n.y)) + \"px)\" }}>\n\n                                <line x1={timeScale.range()[0]} y1={labelHeight/2+lineHeight/2} x2={timeScale.range()[1]} y2={labelHeight/2+lineHeight/2} style={{ stroke: 'rgb(200,200,200)', strokeWidth: '.8px' }}></line>\n\n                       \n\n     {/*\n                                <line\n                                    className=\"count\"\n                                    style={{ stroke: \"black\", strokeWidth: 3, opacity: 0.5 }}\n                                    x1={compressedTimeScale(n.data.lowerBound)}\n                                    x2={compressedTimeScale(n.data.upperBound)}\n                                    y1={0}\n                                    y2={0}></line> */}\n\n                                <rect x={timeScale(minTime)} y={timePadding} width={Math.abs(timeScale(avg) - timeScale(n.data.duration))} height={labelHeight - 2 * timePadding} style={{ fill: slower ? '#ff8d00' : 'rgb(53 130 184)', opacity: '.8' }}></rect>\n\n                                <rect x={timeScale(minTime)} y={labelHeight/2} width={timeScale(diff)} height={lineHeight} style={{ fill: slower ? '#ff8d00' : 'rgb(53 130 184)', opacity: '.8' }}></rect>\n                                {/* <rect x={timeScale(avg)} y={timePadding} width={1} height={labelHeight - 2 * timePadding} style={{ fill: 'black', opacity: '1', 'rx': 0 }}></rect> */}\n\n                                {/* <rect x={0} y={0} width ={glyphSize} height={glyphSize}  transform ={\"translate(\" + timeScale(avg) + \",\" +  (labelHeight/2) + \") rotate(45,2,2)\"} style={{ fill: 'black', opacity: '1'}}></rect> */}\n                                <rect x={0} y={0} width ={glyphSize} height={glyphSize}  style={{ fill: 'black', opacity: '1', transform: \"translate(\" + timeScale(avg) + \"px,\" +  (labelHeight/2 - glyphSize/2) + \"px) rotate(45deg)\"}}></rect>\n\n                                <rect x={0} y={0} width ={glyphSize} height={glyphSize}  style={{ fill: 'red', opacity: '1', transform: \"translate(\" + timeScale(n.data.duration) + \"px,\" +  (labelHeight/2 - glyphSize/2) + \"px) rotate(45deg)\"}}></rect>\n\n\n                                {/* <circle\n                                    className=\"count\"\n                                    style={{ stroke: \"black\", opacity: 1, strokeWidth: '1px' }}\n                                    cx={ slower ? compressedTimeScale.range()[0] : compressedTimeScale(diff)  }\n                                    cy={0}\n                                    r={1}></circle> */}\n\n                                {/* <line x1={compressedTimeScale(n.data.average)} y1={-3} x2={compressedTimeScale(n.data.average)} y2={3} style={{ stroke: 'black', strokeWidth: '1px' }}></line> */}\n\n                                {/* <line x1={compressedTimeScale(n.data.duration)} y1={-3} x2={compressedTimeScale(n.data.duration)} y2={3} style={{ stroke: '#ff5e00', strokeWidth: '1px' }}></line> */}\n\n\n                            </g>\n                        }\n                        return <>{background} {label} {ciPlot} </>\n\n\n                    })}\n\n                    {nodes.map(n => {\n\n                        let metricPlot = <>\n                            {metrics.map((m, i) => {\n\n                                let avg = n.data.stats[m].average;\n                                let value = n.data[m]\n                                let vertScale = metricYScales[m];\n                                let colorScale = metricColorScales[m];\n                                let better = value > avg;\n                                let maxValue = Math.max(avg, value)\n                                let diff = Math.abs(avg - value)\n\n\n                                return <g style={{ \"transform\": \"translate(\" + (xScale(n.data.elapsedTime) + textWidth + barPadding + i * (metricSquare + barPadding)) + \"px, \" + yScale(n.y) + \"px)\" }}>\n                                    {/* <line x1={xScale(n.data.elapsedTime) + textWidth + i * (metricSquare + barPadding)} y1={yScale(n.y)} x2={xScale(n.data.elapsedTime) + textWidth  + i * (metricSquare + barPadding)} y2={yScale(n.y) + labelHeight} style={{ \"stroke\": \"rgb(0,0,0,0.25)\", \"strokeWidth\": .8 }}></line> */}\n                                    {/* <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: colorScale(value), opacity: 1 }} // 'rx': metricSquare \n                                        x={0}\n                                        y={labelHeight - yScale(value)}\n                                        width={n.data.eventID == 'task' ? metricSquare : 0}\n                                        height={2}></rect> */}\n                                    <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: 'black', opacity: 1 }} // 'rx': metricSquare \n                                        x={0}\n                                        y={labelHeight - vertScale(avg)}\n                                        width={n.data.eventID == 'task' ? metricSquare : 0}\n                                        height={1}></rect>\n\n                                    {/* <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: 'red', opacity: 1 }} // 'rx': metricSquare \n                                        x={-5}\n                                        y={labelHeight - vertScale(value)}\n                                        width={n.data.eventID == 'task' ? metricSquare + 5 : 0}\n                                        height={.5}></rect> */}\n\n\n                                    <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: colorScale(value), opacity: .8 }} // 'rx': metricSquare \n                                        x={0}\n                                        y={labelHeight - vertScale(maxValue)}\n                                        width={n.data.eventID == 'task' ? metricSquare : 0}\n                                        height={Math.abs(vertScale(avg) - vertScale(value))}></rect>\n\n                                    {/* {i == metrics.length - 1 ? <line x1={xScale(n.data.elapsedTime) + textWidth + barPadding + (i + 1) * (metricSquare + barPadding)} y1={yScale(n.y)} x2={xScale(n.data.elapsedTime) + textWidth + barPadding + (i + 1) * (metricSquare + barPadding)} y2={yScale(n.y) + labelHeight} style={{ \"stroke\": \"rgb(0,0,0,0.25)\", \"strokeWidth\": .8}}></line> */}\n                                        {/* : ''} */}\n\n                                </g>\n                            })}\n                        </>\n\n                        return metricPlot\n                    }\n\n\n                    )}\n                    {phases.map(p =>\n                        <text\n                            style={{ fontSize: \"1em\", textAnchor: \"start\", fill: 'rgb(90,90,90)' }}\n                            x={xScale(p.elapsedTime)}\n                            y={axisHeight + 5}>\n                            {\" \"}\n                            {p.label}{\" \"}\n                        </text>\n                    )}\n                    <text\n                        style={{ fontSize: \"1em\", textAnchor: \"start\", fill: 'rgb(90,90,90)' }}\n                        x={xScale(maxTime) + 5}\n                        y={axisHeight - 7}>\n                        {\" \"}\n                        {Math.round(maxTime) + ' min'}{\" \"}\n                    </text>\n\n\n                </g>\n            </svg>)\n    }\n\n    function hovered(d) {\n        if (hoveredElement !== d.uniqueID) {\n            setHovered(d.uniqueID)\n        }\n\n    }\n\n    useEffect(() => {\n        if (data) {\n            participants = data.participants\n            participants.map(p => {\n                p.study.map(d => {\n                    d.uniqueID = d.eventID + '_' + Math.random()\n                })\n            })\n        }\n\n    }, [data])\n\n    let [hoveredElement, setHovered] = useState();\n\n    let participants, conditionGroups;\n    if (data) {\n        participants = data.participants\n        // console.log(participants)\n        participants.map(p => p.condition = p.study[0].condition)\n        let allLevels = participants.map(p => p.study.map(s => s.level)).flat();\n        // console.log(allLevels)\n        categories = [... new Set(participants.map(p => p.study.map(s => s.category)).flat())];\n        xDomain = d3.extent(participants, d => d.minutesToComplete);\n        yDomain = d3.extent(allLevels);\n        // console.log(yDomain)\n        conditionGroups = groupBy(participants, 'condition');\n    }\n\n\n    // })\n    let colorScale = d3.scaleLinear()\n        // .domain(d3.extent(allCounts))\n        .domain([0, 800])\n        .range([0.3, 1])\n\n    //Only render when all API calls have returned \n    let ready = data;\n    // if (ready) {\n    //     // console.log(data)\n    // }\n    // console.log('events', eventGroups)\n    return (ready == undefined ? <></> : <React.Fragment key={'events'}>\n        <Box m={2} style={{ display: 'inline-block' }} >\n            <Card className={classes.root} key={'participantOverview'}  >\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        Event View\n                </Typography>\n                    <Typography className={classes.pos} color=\"textSecondary\"  >\n                        Event Sequences\n                    </Typography>\n                    <Divider />\n                    <Box mt={2} >\n                        <Grid container className={classes.root} spacing={2}>\n                            {Object.keys(conditionGroups).map(cond =>\n                                <Grid item xs={12} key={cond}>\n                                    <Grid container justify=\"flex-start\" spacing={2}>\n                                        <Box display=\"flex\" justifyContent=\"center\" p={2}>\n                                            <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n                                                {cond}\n                                            </Typography>\n                                        </Box>\n\n                                        <Divider />\n\n                                        {conditionGroups[cond].slice(0, 5).map(participant => {\n                                            return <>\n                                                <Grid key={participant.participantID} item>\n                                                    <Box borderBottom={1} boxShadow={0} p={1} style={{ borderColor: 'rgba(171, 171, 171, 0.5)' }}>\n                                                        {/* <Box display=\"flex\" justifyContent=\"flex-end\"> */}\n\n                                                        <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n                                                            {'Avg. Accuracy: ' + (Math.round(participant.averageAccuracy * 100) / 100)}\n                                                        </Typography>\n                                                        {/* <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n                                                                {'ID:' + participant.participantID.slice(0, 3) + '...' + participant.participantID.slice(-3)}\n                                                            </Typography> */}\n                                                        {/* </Box> */}\n\n                                                        {eventMap(participant.study, { width: 1600, height: 25 })}\n                                                    </Box>\n\n                                                </Grid>\n                                            </>\n                                        }\n\n                                        )}\n                                    </Grid>\n                                </Grid>)}\n\n                        </Grid>\n                    </Box>\n                </CardContent>\n            </Card>\n        </Box>\n\n    </React.Fragment>\n\n    );\n}\n\n\n// virtualized list\n{/* <Grid container className={classes.root} spacing={2}>\n{ Object.keys(conditionGroups).map(cond=>{\n    let group = conditionGroups[cond];\n    function rowRenderer({\n        key, // Unique key within array of rows\n        index, // Index of row within collection\n        isScrolling, // The List is currently being scrolled\n        isVisible, // This row is visible within the List (eg it is not an overscanned row)\n        style, // Style object to be applied to row (to position it)\n      }) {\n          let el = group[index]\n        return (\n            <Grid key={el.participantID} item>\n            <Typography style={{ display: 'block' }} color=\"primary\" variant='subtitle1'  >\n            {'Avg. Accuracy: ' + el.averageAccuracy}\n            </Typography>\n            <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n            {el.participantID.slice(0,3) + '...' +  el.participantID.slice(el.participantID.length-4,3)}\n            </Typography>\n            \n            {eventMap(el.study, { width: 800, height: 50 })}\n            </Grid>\n        );\n      }\n\n      return <>                            \n    <Grid item xs={6}>\n    <Grid container justify=\"flex-start\" spacing={2}>\n    <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n     {cond}\n    </Typography>\n    <Divider />\n    <List\n            width={1000}\n            height={1000}\n            rowCount={group.length}\n            rowHeight={20}\n            rowRenderer={rowRenderer}\n            />\n              </Grid>\n    </Grid>\n        </>\n\n    }\n        // conditionGroups[cond].map(participant =>{\n         \n  )})\n\n</Grid> */}\n","import React, { useContext } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport TrendingFlatIcon from \"@material-ui/icons/TrendingFlat\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\n// import * as PouchDB from 'pouchdb-browser';\n\nimport * as d3 from \"d3\";\n\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport ProvenanceIsolatedNodes from \"../components/ProvenanceIsolatedNodes\";\n\nimport Grid, { GridSpacing } from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    flexGrow: 1,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\n\nfunction scale(width, maxValue) {\n  return d3.scaleLinear().range([10, width]).domain([0, maxValue]);\n}\n\n\n\nexport default function Upload() {\n\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const { data } = useContext(\n    ProvenanceDataContext\n  );\n\n  // })\n  let colorScale = d3\n    .scaleLinear()\n    // .domain(d3.extent(allCounts))\n    .domain([0, 800])\n    .range([0.3, 1]);\n\n  //Only render when all API calls have returned\n  let ready = data\n  // console.log('actions', actions)\n  return ready == undefined ? (\n    <></>\n  ) : (\n      <>\n\n        {data.tasks.map(task => {\n          let taskTooltip = <Typography>{task.prompt}</Typography>;\n          return (\n            <Box\n              m={2}\n              key={\"box_\" + task.taskID}\n              style={{ display: \"inline-block\" }}>\n              {/* style={{ 'width': 600 }}  */}\n              <Card className={classes.root} key={task.taskID}>\n                <CardContent>\n                  <Typography variant=\"h5\" component=\"h2\">\n                    {task.name}\n                  </Typography>\n                  <Tooltip title={taskTooltip}>\n                    <Typography className={classes.pos} color=\"textSecondary\">\n                      {task.prompt.slice(0, 60)}\n                    </Typography>\n                  </Tooltip>\n                  <Divider />\n\n                  {Object.keys(task.conditions).map(key => {\n                    let condition = task.conditions[key];\n                    let freqPattern = condition.patterns[0].topK;\n\n                    // let frequentActions = condition.actions.map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) })) //actions.filter(a => a.taskID == task.taskID && a.condition == condition).splice(0, 5).map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) }))\n                    let filteredMetrics = condition.stats //metrics.filter(m => m.group.taskID == task.taskID && m.group.condition == condition);\n\n                    let metricValues = [\n                      ...new Set(filteredMetrics.map((m) => m.metric)),\n                    ]; // console.log(frequentActions)\n\n                    let nodeWidth = 25;\n                    let characterWidth = 5;\n                    let textHeight = 8\n                    let xScale = d3.scaleLinear().domain([0, 1]).range([0, nodeWidth + 10])\n                    let yScale = d3.scaleLinear().domain([0, 1]).range([0, 15])\n                    let colorScale = d3.scaleOrdinal(d3.schemeTableau10).domain(data.actions);\n\n                    let renderPattern = function (nodes) {\n                      let background = nodes.map((n) => {\n                        return <>\n\n                          <line x1={n.x + nodeWidth / 2} y1={yScale(n.y)} x2={n.x + nodeWidth / 2} y2={yScale(0) + nodeWidth} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '1.2px', 'strokeLinecap':'round' }}></line>\n                          <line x1={n.x + nodeWidth / 2} y1={yScale(n.y)} x2={n.x + nodeWidth / 2 + 3} y2={yScale(n.y)} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '1.2px' }}></line>\n                          <rect className='count' key={'background_' + n.event} style={{ fill: colorScale(n.data.event), stroke: 'white', strokeWidth: '1px', 'rx': 2 }}\n                            x={n.x}\n                            y={yScale(0)}\n                            width={nodeWidth}\n                            height={nodeWidth}></rect>\n                        </>\n\n                      })\n\n                      let labels = nodes.map((n) => {\n                        return <>\n                          <rect className='count' key={'background_' + n.event} style={{ fill: 'white', stroke: 'white', strokeWidth: '1px' }}\n                            x={n.x + nodeWidth / 2+3}\n                            y={yScale(n.y)-2}\n                            width={n.labelExtent}\n                            height={textHeight}></rect>\n\n                          <text\n                            style={{ fontSize: \".75em\", textAnchor: \"start\", fill: 'rgb(90,90,90)' }}\n                            x={n.x + nodeWidth / 2 + 5 }\n                            y={yScale(n.y) + textHeight/2}>\n                            {\" \"}\n                            {n.data.event}{\" \"}\n                          </text>\n                        </>\n\n                      })\n\n                      return <svg width={300} height={yScale(Math.max(...nodes.map(n => n.y))) + 50} >\n                        <g style={{ \"transform\": \"translate(50px, 30px)\" }}>\n\n                          {background} {labels}\n                        </g>\n\n\n                      </svg>\n                    }\n\n                    return (\n                      <React.Fragment key={'taskcard_' + key}>\n                        <Typography variant=\"overline\">{key}</Typography>\n\n                        <Grid container className={classes.root} spacing={2}>\n                          <Grid item xs={12}>\n                            <Grid container justify=\"flex-start\" spacing={2}>\n                              <Grid key={\"prov\"} item>\n                                <>{[0, 1, 2].map(i => {\n                                  let frequentActions = freqPattern[i].seq.map(a => ({ event: a, id: a, count: freqPattern[i].count, scale: colorScale(freqPattern[i].count) })) //actions.filter(a => a.taskID == task.taskID && a.condition == condition).splice(0, 5).map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) }))\n\n                                  let evenlabelPos = []\n                                  let eveny = 1;\n                                  let labelPos = []\n                                  let y = 0.5;\n                                  let nodes = frequentActions.map((d, i) => {\n                                    // console.log(d.shortName)\n                                    let labelStart = xScale(i)\n                                    let labelExtent = d.event.length * characterWidth + 30;\n                                    let n = {};\n                                    n['data'] = d;\n                                    let level\n                                    if (i%2 == 0) {\n                                       level = evenlabelPos.find(p => p.x < labelStart);\n                                    }else{\n                                      level = labelPos.find(p => p.x < labelStart);\n                                   }\n                                    // console.log(level)\n                                    if (!level) {\n                                      if (i%2 == 0){\n                                        eveny = eveny + 1;\n                                        evenlabelPos.push({ y:eveny, x: labelExtent, label: d.shortName })\n                                        n['y'] = eveny;\n                                      } else {\n                                        y = y - 1;\n                                        labelPos.push({ y, x: labelExtent, label: d.shortName })\n                                        n['y'] = y;\n                                      }\n                                  \n                                    } else {\n\n                                      if (i % 2 == 0) {\n                                        n['y'] = level.y\n                                        labelPos = labelPos.filter(p => p.y !== level.y);\n                                        labelPos.push({ y: level.y, x: labelExtent, label: d.shortName })\n                                        labelPos.sort((a, b) => a.y < b.y ? -1 : 1)\n                                      } else {\n                                        n['y'] = level.y\n                                        labelPos = labelPos.filter(p => p.y !== level.y);\n                                        labelPos.push({ y: level.y, x: labelExtent, label: d.shortName })\n                                        labelPos.sort((a, b) => a.y < b.y ? -1 : 1)\n                                      }\n\n                                      \n                                    }\n                                    n['x'] = labelStart;\n                                    n['labelExtent'] = labelExtent\n                                    return n;\n                                  })\n\n                                  return <Box mt={\"5px\"} mb={\"6px\"}>\n                                    {renderPattern(nodes)}\n                                  </Box>\n                                }\n                                )}\n                                </>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                        <Divider />\n                      </React.Fragment>\n                    );\n                  })}\n                  <div></div>\n                </CardContent>\n                <CardActions>\n                  <Button size=\"small\">Explore</Button>\n                </CardActions>\n              </Card>\n            </Box>\n          );\n        })}\n      </>\n    );\n}\n","import React, { useContext } from \"react\";\nimport { Input } from \"antd\";\nimport { relativeProvenanceData } from \"../common/data/provenanceMocks.js\";\nimport EventAccordion from \"../components/EventAccordion\";\nimport Event_Layers from \"../components/Event_Layers\";\n\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\n\nimport CollapsibleTable from '../components/EventTable'\nimport * as d3 from \"d3\";\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\n\nconst { Search } = Input;\n\nconst Overview = ({ location }) => {\n\n  const { data } = useContext(ProvenanceDataContext);\n\n  const [search, setSearch] = React.useState(\"\");\n\n  function createEvent(value) {\n    {\n      setSearch(\"\");\n      console.log(\"new Event is\", value);\n      newEvent(value);\n    }\n  }\n\n  return (<div style={{ padding: \"15px\" }}>\n    <Search\n      placeholder=\"Create Event Type\"\n      enterButton={<PlusSquareOutlined />}\n      size=\"large\"\n      // onSearch={newEvent}\n      // onChange={event => setSearch(event.target.value)}\n      style={{ width: 672 }}\n    // value={search}\n    />\n    <div style={{ 'paddingTop': \"15px\" }}>\n      {/* {patternComponent} */}\n      {/* <EventAccordion /> */}\n      {/* <CollapsibleTable data={data} onChange={setData} /> */}\n      {/* <EventAccordion data={data} onChange={setData} /> */}\n    </div>\n  </div>)\n};\n\nexport default Overview;\n","import React from \"react\";\nimport TableDataLoader from \"../components/TableDataLoader\";\n\nconst Export = () => {\n  return <div>This is export </div>;\n};\n\nexport default Export;\n","//@ts-nocheck\nimport React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { select, event } from \"d3-selection\";\nimport { scaleLinear } from \"d3-scale\";\nimport { brushX } from \"d3-brush\";\nimport { axisBottom } from \"d3-axis\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fade from \"@material-ui/core/Fade\";\n\nfunction obtainItemCounts(arr) {\n  let occurrences = {};\n  for (let i = 0, j = arr.length; i < j; i++) {\n    occurrences[arr[i]] = (occurrences[arr[i]] || 0) + 1;\n  }\n  return occurrences;\n}\nexport const CategoricalFilter = (props) => {\n  const { data, width, scale, labels, onFilter = () => {} } = props;\n  const occurrences = useMemo(() => obtainItemCounts(data), [data]);\n  // search through data for all states\n  const [currentFilter, setCurrentFilterInternal] = useState(\n    Object.keys(occurrences)\n  );\n  const height = 20;\n  const fullHeight = 20 + 15;\n  const maxOccurance = Object.values(occurrences).reduce((a, b) =>\n    a > b ? a : b\n  );\n  const yScale = d3.scaleLinear().domain([0, maxOccurance]).range([0, height]);\n  function setCurrentFilter(currentValues) {\n    console.log(currentValues);\n    onFilter(currentValues);\n    setCurrentFilterInternal(currentValues);\n  }\n  return (\n    <svg width={width} height={fullHeight}>\n      {Object.entries(occurrences).map(([key, value], index) => {\n        const color = currentFilter.includes(key) ? \"black\" : \"#cfcfcf\";\n        return (\n          <Tooltip\n            TransitionComponent={Fade}\n            TransitionProps={{ timeout: 600 }}\n            title={key}\n            key={key}\n            PopperProps={{\n              popperOptions: {\n                modifiers: {\n                  offset: {\n                    enabled: true,\n                    offset: \"0px, -6px\",\n                  },\n                },\n              },\n            }}>\n            <g\n              pointerEvents={\"bounding-box\"}\n              key={key}\n              onClick={() => {\n                const indexOfValue = currentFilter.indexOf(key);\n                let temp = Object.assign([], currentFilter);\n\n                if (indexOfValue > -1) {\n                  temp.splice(indexOfValue, 1);\n                } else {\n                  temp.push(key);\n                }\n                setCurrentFilter(temp);\n              }}\n              cursor={\"pointer\"}\n              fill={\"none\"}>\n              <rect\n                x={scale(key)}\n                width={20}\n                height={yScale(value)}\n                y={height - yScale(value)}\n                fill={color}></rect>\n\n              <g transform={`translate(${scale(key)},${height})`} fill={color}>\n                {labels[key]}\n              </g>\n            </g>\n          </Tooltip>\n        );\n      })}\n    </svg>\n  );\n};\n\nexport const Histogram = ({ data, xScale, buckets, yScale, height }) => {\n  console.log(\"hist props\", data, xScale, buckets, yScale, height);\n  const binWidth = 10;\n  const [min, max] = xScale.domain();\n  const currentBinCounter = d3\n    .histogram()\n    .domain([min - 0.001, max + 0.001]) // to make inclusive of threshold\n    .thresholds(buckets.map((bucket) => bucket.x1));\n\n  const currentBins = currentBinCounter(data);\n\n  const bars = (\n    <g transform={`translate(${(1 / 3) * binWidth},0)`}>\n      {buckets.map((bucket, index) => {\n        console.log(\n          index,\n          currentBins,\n          currentBins[index],\n          yScale(currentBins[index].length),\n          yScale(0),\n          yScale(250)\n        );\n        return (\n          <g>\n            <rect\n              key={index}\n              x={xScale(bucket.x0) - 0.5 * binWidth} // 1/2 xBandwidth to move to middle 1/2 another because of -1 index on xBand domain\n              y={yScale(bucket.length)}\n              width={binWidth}\n              fill={\"gray\"}\n              opacity={0.3}\n              height={height - yScale(bucket.length)}></rect>\n            <rect\n              key={index}\n              x={xScale(bucket.x0) - 0.5 * binWidth} // 1/2 xBandwidth to move to middle 1/2 another because of -1 index on xBand domain\n              y={yScale(currentBins[index].length)}\n              width={binWidth}\n              fill={\"black\"}\n              height={height - yScale(currentBins[index].length)}></rect>\n          </g>\n        );\n      })}\n    </g>\n  );\n\n  return bars;\n};\n\nconst Brush = (props) => {\n  const { width, height, onChange } = props;\n  const brushRef = useRef(null);\n\n  useEffect(() => {\n    const node = brushRef.current;\n\n    const dayBrush = brushX()\n      .extent([\n        [0, 0],\n        [width, height],\n      ])\n      //.on(\"brush\", brushed)\n      .on(\"end\", brushed);\n\n    select(node)\n      .selectAll(\"g.brush\")\n      .data([0])\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"brush\");\n\n    select(node).select(\"g.brush\").call(dayBrush);\n\n    /*\n    Code for updating brush if we want it to dynamically update while brushing\n    function brushed() {\n      console.warn(event);\n      onBrushFunction(event.selection);\n    }*/\n    function brushed() {\n      // if filter cleared, set to all\n      if (!event.selection) {\n        event.selection = [0, width];\n      }\n      console.warn(\"clear\", event);\n      onChange(event.selection);\n    }\n  });\n  return (\n    <svg ref={brushRef} height={height} width={width}>\n      {props.children}\n    </svg>\n  );\n};\n\nconst BrushableHistogram = ({\n  data,\n  xScale,\n  buckets,\n  yScale,\n  height,\n  setMinimum,\n  setMaximum,\n}) => {\n  const width = xScale.range()[1];\n\n  function setFilterBounds(inputs) {\n    if (inputs?.length !== 2) {\n      inputs = xScale.domain();\n    }\n    // scale inversion\n    setMinimum(xScale.invert(inputs[0]));\n    // set bounds\n    setMaximum(xScale.invert(inputs[1]));\n  }\n\n  return (\n    <Brush width={width} height={height} onChange={setFilterBounds}>\n      <Histogram\n        data={data}\n        width={width}\n        height={height}\n        yScale={yScale}\n        xScale={xScale}\n        buckets={buckets}></Histogram>\n    </Brush>\n  );\n};\n\nexport const QuantitativeFilter = ({\n  data,\n  xScale,\n  buckets,\n  height,\n  yScale,\n  onFilter = (val) => {},\n}) => {\n  console.log(\"new Time Filter\");\n  const [minimum, setMinimum] = useState(d3.min(data));\n  const [maximum, setMaximum] = useState(d3.max(data));\n  const debouncedMin = useDebounce(minimum, 100);\n  const debouncedMax = useDebounce(maximum, 100);\n  useEffect(() => {\n    onFilter({ filterMin: debouncedMin, filterMax: debouncedMax });\n  }, [debouncedMin, debouncedMax]);\n  return (\n    <BrushableHistogram\n      yScale={yScale}\n      xScale={xScale}\n      buckets={buckets}\n      height={height}\n      data={data}\n      setMinimum={setMinimum}\n      setMaximum={setMaximum}></BrushableHistogram>\n  );\n};\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n","import React from \"react\";\nimport ReactTags from \"react-tag-autocomplete\";\nimport \"./reacttags.css\";\n\nconst TagWrapper = ({ tags, onTagChange, isMaster }) => {\n  function handleAddTag(tag) {\n    onTagChange(\"Add\", tag);\n  }\n\n  function handleDeleteTag(i) {\n    const allTags = tags.slice(0);\n    const tag = allTags.splice(i, 1);\n    onTagChange(\"Delete\", tag);\n  }\n\n  return (\n    <ReactTags\n      autofocus={false}\n      tags={tags}\n      allowNew={true}\n      handleDelete={handleDeleteTag}\n      handleAddition={handleAddTag}\n    />\n  );\n};\nexport default TagWrapper;\n","import React, { useState, useEffect } from \"react\";\nimport { QuantitativeFilter, CategoricalFilter } from \"./TableFilters\";\nimport * as d3 from \"d3\";\nimport eventMapping from \"./eventMapping\";\nimport TagWrapper from \"./reactTagWrapper\";\nimport ProvenanceIsolatedNodes from \"./ProvenanceIsolatedNodes\";\n\nconst columnOverrides = {};\nconst filterQuantitativeValues = (filter, value) =>\n  filter.filterMin && value <= filter.filterMax;\n\nconst QuantitativeCell = ({ rowData, name, commonScale }) => {\n  let additionalComponents;\n  const cellHeight = 20;\n  if (name === \"time\" && rowData?.sequence) {\n    // map through requences\n    additionalComponents = rowData.sequence.map((node) => {\n      return (\n        <rect\n          width={3}\n          x={commonScale(node.time)}\n          height={cellHeight}\n          opacity={0.25}></rect>\n      );\n    });\n  }\n  return (\n    <svg width={commonScale.range()?.[1]} height={cellHeight}>\n      <rect\n        fill={\"gray\"}\n        width={commonScale(rowData[name])}\n        height={cellHeight}></rect>\n      {additionalComponents}\n    </svg>\n  );\n};\nexport class NotesColumn {\n  constructor(metaData) {\n    this.width = metaData.width;\n    this.handleTagCreation = metaData.handleTagCreation;\n    this.selectionIndicies = [];\n  }\n  generateColumnObject() {\n    return {\n      title: \"Notes\",\n      name: \"None\",\n      cellStyle: {\n        padding: \"4px 16px\",\n      },\n      width: this.width,\n      customSort: (a, b) => b.tags.length - a.tags.length,\n      filterComponent: () => <div></div>,\n      render: (rowData) => {\n        if (!Array.isArray(rowData.tags)) {\n          rowData.tags = [];\n        }\n        return (\n          <TagWrapper\n            tags={rowData.tags}\n            onTagChange={(action, tag) => {\n              if (action === \"Add\") {\n                rowData.tags.push(tag);\n              } else {\n                const index = rowData.tags.findIndex((iterTag) => {\n                  return iterTag.name === tag[0]?.name;\n                });\n                if (index > -1) {\n                  rowData.tags.splice(index, 1);\n                }\n              }\n\n              this.handleTagCreation(\n                rowData.participantID,\n                rowData.taskID,\n                tag,\n                action\n              );\n            }}></TagWrapper>\n        );\n      },\n    };\n  }\n}\nexport class CategoricalColumn {\n  constructor(data, name, metaData) {\n    this.name = name;\n    this.data = data;\n    this.width = metaData.width ? metaData.width : 100;\n    this.order = metaData.order;\n    this.hideByDefault = metaData.hideByDefault;\n  }\n\n  generateColumnObject() {\n    return {\n      title: this.name,\n      name: this.name,\n      render: (rowData) => {\n        return (\n          <span>{rowData[this.name] ? rowData[this.name] : this.name}</span>\n        );\n      },\n      width: this.width,\n      hideByDefault: this.hideByDefault,\n      order: this.order,\n    };\n  }\n}\nexport class QuantitativeColumn {\n  constructor(data, name, metaData, handleFilterChange) {\n    this.name = name;\n    this.data = data;\n    this.type = \"quantitative\";\n    this.height = 30;\n    this.width = metaData.width ? metaData.width : 100;\n    this.order = metaData.order;\n    this.hideByDefault = metaData.hideByDefault;\n    this.customSort = (a, b) => a[this.name] - b[this.name];\n    this.handleFilterChange = handleFilterChange;\n    this.customFilterAndSearch = (filter, value) => {\n      return filterQuantitativeValues(filter.value, value);\n    };\n    this.cellComponent = (rowData) => {\n      return (\n        <QuantitativeCell\n          rowData={rowData}\n          name={this.name}\n          commonScale={this.xScale}></QuantitativeCell>\n      );\n    };\n    let [min, max] = d3.extent(this.data, (datum) => datum[this.name]);\n    if (min > 0) {\n      min = 0;\n    }\n\n    this.xScale = d3\n      .scaleLinear()\n      .domain([min - 0.001, max + 0.001])\n      .range([10, this.width - 20]); // offset from sides\n    this.yScale = d3.scaleLinear().range([this.height, 0]);\n    // the scale\n    let niceX = this.xScale.nice();\n    const binner = d3.histogram().domain(niceX.domain());\n    const buckets = binner(data.map((datum) => datum[this.name]));\n    this.yScale = this.yScale.domain([\n      0,\n      d3.max(buckets, (bucket) => bucket.length),\n    ]);\n    this.buckets = buckets;\n  }\n\n  set setWidth(newWidth) {\n    this.width = newWidth;\n    this.scale.range([0, this.width]);\n  }\n\n  set setRender(Component) {\n    this.cellComponent = Component;\n  }\n\n  generateColumnObject() {\n    return {\n      title: this.name,\n      name: this.name,\n      width: this.width,\n      type: this.type,\n      customSort: this.customSort,\n      render: this.cellComponent,\n      order: this.order,\n      hideByDefault: this.hideByDefault,\n      customFilterAndSearch: this.customFilterAndSearch,\n      groupedSummaryComponent: ({ incomingData }) => {\n        return (\n          <GroupDataResolver incomingData={incomingData}>\n            {({ partitionedData }) => {\n              if (partitionedData.length === 0) {\n                return <div></div>;\n              }\n              return (\n                <QuantitativeFilter\n                  xScale={this.xScale}\n                  yScale={this.yScale}\n                  buckets={this.buckets}\n                  height={this.height}\n                  data={partitionedData.map(\n                    (datum) => datum[this.name]\n                  )}></QuantitativeFilter>\n              );\n            }}\n          </GroupDataResolver>\n        );\n      },\n      filterComponent: (props) => {\n        return (\n          <QuantitativeFilter\n            {...props}\n            xScale={this.xScale}\n            yScale={this.yScale}\n            buckets={this.buckets}\n            height={this.height}\n            onFilter={(filter, value, row) => {\n              return this.handleFilterChange(this.name, filter);\n            }}\n            data={this.data.map(\n              (datum) => datum[this.name]\n            )}></QuantitativeFilter>\n        );\n      },\n    };\n  }\n}\n\nconst EventsSummary = (props) => {\n  const { incomingData } = props;\n  if (!incomingData || !incomingData[0]) {\n    return <div></div>;\n  }\n  console.log(\"events summary\", incomingData);\n\n  return (\n    <ProvenanceIsolatedNodes\n      nodes={incomingData[0].sequence}\n      handleProvenanceNodeClick={console.log}></ProvenanceIsolatedNodes>\n  );\n};\nexport class ProvenanceColumn {\n  constructor(metaData) {\n    this.width = 300;\n    this.handleProvenanceNodeClick = metaData.handleProvenanceNodeClick;\n  }\n  generateColumnObject() {\n    return {\n      title: \"Events Used\",\n      name: \"provenance\",\n      width: this.width,\n      customSort: (a, b) => a.sequence.length - b.sequence.length,\n      render: (renderData) =>\n        renderProvenanceNodeCell(renderData, this.handleProvenanceNodeClick),\n      groupedSummaryComponent: (incomingData) => (\n        <EventsSummary incomingData={incomingData}></EventsSummary>\n      ),\n      filterComponent: (props) => <div></div>,\n    };\n  }\n}\n\nfunction renderNotesCell(rowData) {\n  if (!Array.isArray(rowData.tags)) {\n    rowData.tags = [];\n  }\n  return (\n    <TagWrapper\n      tags={rowData.tags}\n      onTagChange={(action, tag) => {\n        // check if rowData is selected;\n        if (action === \"Add\") {\n          rowData.tags.push(tag);\n        } else {\n          const index = rowData.tags.findIndex((iterTag) => {\n            return iterTag.name === tag[0]?.name;\n          });\n          if (index > -1) {\n            rowData.tags.splice(index, 1);\n          }\n        }\n      }}></TagWrapper>\n  );\n}\n\nfunction renderNotesColumn(notesColumnWidth) {\n  return {\n    title: \"Notes\",\n    name: \"None\",\n    cellStyle: {\n      padding: \"4px 16px\",\n    },\n    width: notesColumnWidth,\n    customSort: (a, b) => b.tableData.tags.length - a.tableData.tags.length,\n    filterComponent: () => <div></div>,\n    render: renderNotesCell,\n  };\n}\n\nfunction renderProvenanceNodeCell(data, handleProvenanceNodeClick) {\n  return (\n    <ProvenanceIsolatedNodes\n      nodes={data.sequence}\n      handleProvenanceNodeClick={\n        handleProvenanceNodeClick\n      }></ProvenanceIsolatedNodes>\n  );\n}\n\nconst GroupDataResolver = (props) => {\n  const { incomingData, children } = props;\n  const [partitionedData, setPartitionedData] = useState([]);\n  useEffect(() => {\n    if (incomingData && incomingData.length > 0) {\n      setPartitionedData(incomingData);\n    }\n  }, incomingData);\n  if (_.isFunction(children)) {\n    return children({ partitionedData });\n  }\n  return <div></div>;\n};\n","//@ts-nocheck\nimport React, { useState, useEffect, forwardRef, useMemo } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  GroupingState,\n  SelectionState,\n  IntegratedSelection,\n  IntegratedGrouping,\n  FilteringState,\n  IntegratedFiltering,\n  IntegratedSummary,\n  SummaryState,\n} from \"@devexpress/dx-react-grid\";\nimport {\n  Grid,\n  VirtualTable,\n  TableHeaderRow,\n  TableGroupRow,\n  TableSelection,\n  GroupingPanel,\n  Toolbar,\n  DragDropProvider,\n  TableFilterRow,\n  TableColumnResizing,\n  ColumnChooser,\n  TableColumnVisibility,\n  TableSummaryRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\n\nimport ProvenanceGraph from \"./ProvenanceGraph\";\nimport * as d3 from \"d3\";\nimport TagsInput from \"react-tagsinput\";\nimport eventMapping from \"./eventMapping\";\nimport TagStyles from \"./tagstyles.module.css\";\nimport TagWrapper from \"./reactTagWrapper\";\nimport { QuantitativeFilter, CategoricalFilter } from \"./TableFilters\";\nimport styles from \"./ProvenanceTable.module.css\";\nimport { ifError } from \"assert\";\nimport _ from \"lodash\";\nimport {\n  QuantitativeColumn,\n  CategoricalColumn,\n  ProvenanceColumn,\n  NotesColumn,\n} from \"./ColumnDefinitions.tsx\";\nimport {\n  CodeSandboxCircleFilled,\n  PropertySafetyFilled,\n} from \"@ant-design/icons\";\nimport { Typography } from \"@material-ui/core\";\n\nconst differenceFilter = (firstArray, secondArray) => {\n  return firstArray.filter(\n    (firstArrayItem) =>\n      !secondArray.some(\n        (secondArrayItem) =>\n          firstArrayItem.columnName === secondArrayItem.columnName\n      )\n  );\n};\nfunction toFixedTrunc(x, n) {\n  const v = (typeof x === \"string\" ? x : x.toString()).split(\".\");\n  if (n <= 0) return v[0];\n  let f = v[1] || \"\";\n  if (f.length > n) return `${v[0]}.${f.substr(0, n)}`;\n  while (f.length < n) f += \"0\";\n  return `${v[0]}.${f}`;\n}\nconst GroupCellContent = (props) => {\n  const { provenanceData, column, row, children } = props;\n  console.log(column, props);\n  const groupData = children.props.columnSummaries[0].value;\n\n  let Content = () => <div></div>;\n  if (column.groupedSummaryComponent) {\n    Content = column.groupedSummaryComponent;\n  }\n\n  return (\n    <TableSummaryRow.GroupCell {...props}>\n      <Content incomingData={groupData} partitionedData={groupData}></Content>\n    </TableSummaryRow.GroupCell>\n  );\n};\nconst GroupRowContent = (props) => {\n  return (\n    <div>\n      <p>Hello this is a test</p>\n      <TableGroupRow.Row {...props}></TableGroupRow.Row>\n    </div>\n  );\n};\n\nconst nameGroupCriteria = (value) => {\n  const firstLetter = String(value).substr(0, 1).toLowerCase();\n  const groupValue =\n    firstLetter < \"n\" ? { from: \"A\", to: \"M\" } : { from: \"N\", to: \"Z\" };\n  return {\n    value: groupValue,\n    key: `${groupValue.from}-${groupValue.to}`,\n  };\n};\nconst FilterCells = ({ value, other, ...restProps }) => {\n  let Item; //= () => <div></div>;\n  let itemProps = Object.assign({}, restProps);\n  if (restProps.column.filterComponent) {\n    itemProps[\"onFilter\"] = restProps.onFilter;\n    Item = restProps.column.filterComponent;\n    //Item = (props) => <NewItem {...props}></NewItem>;\n  } else {\n    Item = (props) => <TableFilterRow.Cell {...props}></TableFilterRow.Cell>;\n  }\n  return (\n    <VirtualTable.Cell style={{ width: \"100%\" }}>\n      <Item {...itemProps}></Item>\n    </VirtualTable.Cell>\n  );\n};\nconst ProvenanceCells = ({ value, style, ...restProps }) => {\n  let item;\n  if (restProps.column.render) {\n    item = restProps.column.render(restProps.row);\n  }\n  return (\n    <VirtualTable.Cell {...restProps} style={{ margin: \"16px\" }}>\n      {item}\n    </VirtualTable.Cell>\n  );\n};\n\nfunction getGroupSummaryValues(props) {\n  //const { selection, rows, totalSummaryItems } = this.state;\n  //const selectionSet = new Set(selection);\n  //const selectedRows = rows.filter((row, rowIndex) => selectionSet.has(rowIndex));\n  return rows; /*totalSummaryItems.map((summary) => {\n      const { columnName, type } = summary;\n      return IntegratedSummary.defaultCalculator(type, selectedRows, row => row[columnName]);\n    });*/\n}\n// must use non zero order else !order is true\n\nfunction getColumnMetaData(columnKey, columnMetaData) {\n  if (columnMetaData[columnKey]) {\n    return columnMetaData[columnKey];\n  } else {\n    return { hideByDefault: true };\n  }\n}\n\nfunction generateColumnDefinition(\n  columnSchema,\n  data,\n  columnsMetaData,\n  handleFilterChange\n) {\n  let defaultColumnDefinition;\n  const columnMetaData = getColumnMetaData(\n    columnSchema.COLUMN_NAME,\n    columnsMetaData\n  );\n  if (columnSchema.DATA_TYPE === \"int\" || columnSchema.DATA_TYPE === \"float\") {\n    defaultColumnDefinition = new QuantitativeColumn(\n      data,\n      columnSchema.COLUMN_NAME,\n      columnMetaData,\n      handleFilterChange\n    );\n  } else if (\n    columnSchema.DATA_TYPE === \"longtext\" ||\n    columnSchema.DATA_TYPE === \"text\"\n  ) {\n    defaultColumnDefinition = new CategoricalColumn(\n      data,\n      columnSchema.COLUMN_NAME,\n      columnMetaData,\n      handleFilterChange\n    );\n  } else if (columnSchema.DATA_TYPE === \"provenance\") {\n    defaultColumnDefinition = new ProvenanceColumn(columnMetaData);\n  } else if (columnSchema.DATA_TYPE === \"tag\") {\n    defaultColumnDefinition = new NotesColumn(columnMetaData);\n    /*\n    defaultColumnDefinition = {\n      title: columnSchema.COLUMN_NAME,\n      name: columnSchema.COLUMN_NAME,\n      render: (rowData) => <span>{\"tag\"}</span>,\n      width: 100,\n    };*/\n  } else {\n    console.error(\n      `[DevExtremeTable.tsx] ERROR: Column Schema contains unkown column type ${columnSchema.DATA_TYPE}.`\n    );\n  }\n\n  return defaultColumnDefinition;\n}\nconst DevExtremeTable = ({\n  provenanceData,\n  handleProvenanceNodeClick,\n  tableSchema,\n  handleTagCreation,\n}) => {\n  const [filters, setFilters] = React.useState([]);\n  const handleFilter = (columnName, value) => {\n    const currentFilterIndex = filters.findIndex(\n      (filter) => filter.name === columnName\n    );\n    let clonedFilters = [...filters];\n    if (currentFilterIndex > -1) {\n      clonedFilters[currentFilterIndex] = {\n        columnName: columnName,\n        value: value,\n      };\n    } else {\n      clonedFilters.push({ columnName: columnName, value: value });\n    }\n    setFilters(clonedFilters);\n    console.log(\"new filter\", clonedFilters);\n  };\n  let columnMetaData = {\n    participantID: { order: 1 },\n    condition: { order: 2 },\n    accuracy: { width: 125, order: 3 },\n    time: { width: 200, order: 4 },\n    sequence: {\n      width: 300,\n      order: 5,\n      handleProvenanceNodeClick: handleProvenanceNodeClick,\n    },\n    notes: { width: 200, order: 6, handleTagCreation: handleTagCreation },\n  };\n\n  React.useEffect(() => {\n    /*\n    setTimeColumnDefinition(renderTimeColumn(provenanceData, 250));\n    setAccuracyColumnDefinition(renderAccuracyColumn(provenanceData, 100));\n    setEventsColumnDefinition(renderProvenanceNodeColumn(provenanceData, 500));\n    //setNotesColumnDefinition(renderNotesColumn(200));\n    setRows(provenanceData);*/\n\n    setColumns(\n      tableSchema\n        .map((columnSchema) =>\n          generateColumnDefinition(\n            columnSchema,\n            provenanceData,\n            columnMetaData,\n            handleFilter\n          ).generateColumnObject()\n        )\n        .sort((a, b) => {\n          if (!a.order) {\n            return 1;\n          }\n          if (!b.order) {\n            return -1;\n          }\n          return a.order > b.order ? 1 : -1;\n        })\n    );\n  }, [provenanceData]);\n\n  const [columns, setColumns] = useState(\n    tableSchema\n      .map((columnSchema) =>\n        generateColumnDefinition(\n          columnSchema,\n          provenanceData,\n          columnMetaData\n        ).generateColumnObject()\n      )\n      .sort((a, b) => {\n        if (!a.order) {\n          return 1;\n        }\n        if (!b.order) {\n          return -1;\n        }\n        return a.order > b.order ? 1 : -1;\n      })\n  );\n  const [selection, setSelectionInternal] = useState([]);\n\n  const setSelection = (selectionIndicies) => {\n    setSelectionInternal(selectionIndicies);\n  };\n\n  const [rows, setRows] = useState(provenanceData);\n  const [grouping, setGroupingInternal] = useState([]);\n  const setGrouping = (newGrouping) => {\n    // if an item is recently grouped on, remove any filters for it.\n    let newlyAddedGroups = differenceFilter(newGrouping, grouping)?.[0];\n    if (newlyAddedGroups) {\n      let currentFilter = filters.find(\n        (filterItem) => newlyAddedGroups.columnName === filterItem.columnName\n      );\n      if (!currentFilter) {\n        currentFilter = { value: { filterMin: 0.5, filterMax: 1.5 } };\n      }\n      const newGroupIndex = newGrouping.findIndex(\n        (newGroup) => newGroup.columnName === newlyAddedGroups.columnName\n      );\n      newGrouping[newGroupIndex] = Object.assign(newGrouping[newGroupIndex], {\n        groupMetaData: currentFilter.value,\n      });\n    }\n    // search through grouping,\n    setGroupingInternal(newGrouping);\n    //setFilters(clonedFilters);\n  };\n  const quantitativePredicate = (value, column, filterValue) => {\n    // find filter value\n    const isRowInTrueGroup = column.customFilterAndSearch(\n      { value: filterValue },\n      value\n    );\n    return {\n      value: isRowInTrueGroup,\n      key: `${column.name}-${isRowInTrueGroup}`,\n    };\n  };\n  const integratedGroupingColumnExtensions = useMemo(\n    () => {\n      return columns.map((column) => {\n        // if quantitative column, group with filter value\n        if (column.type && column.type === \"quantitative\") {\n          const group = grouping.find(\n            (group) => group.columnName === column.name\n          );\n          let groupingValue = group\n            ? group.groupMetaData\n            : { filterMin: 0.2, filterMax: 1.2 };\n\n          return {\n            columnName: column.name,\n            criteria: (value) =>\n              quantitativePredicate(value, column, groupingValue),\n          };\n        }\n        return { columnName: column.name };\n      });\n    },\n    [columns, grouping]\n\n    // { columnName: \"visType\", criteria: nameGroupCriteria },\n    //{ columnName: \"answer\", criteria: (data) => data.accuracy > 0.5 },\n  );\n  const [tableGroupColumnExtension] = useState([\n    columns.map((column) => ({\n      columnName: column.name,\n      showWhenGrouped: true,\n    })),\n    //  { columnName: \"visType\", showWhenGrouped: true },\n    // { columnName: \"answer\", showWhenGrouped: true },\n  ]);\n\n  const [defaultColumnWidths] = useState(\n    columns.map((column) => {\n      return {\n        columnName: column.name,\n        width: column.width ? column.width : 100,\n      };\n    })\n  );\n\n  const [filteringColumnExtensions] = useState(\n    columns.map((column) => {\n      return {\n        columnName: column.name,\n        predicate: (value, filter, row) => {\n          //if (!filter.value.length) return true;\n          if (column.customFilterAndSearch) {\n            return column.customFilterAndSearch(filter, value, row);\n          }\n          return IntegratedFiltering.defaultPredicate(value, filter, row);\n        },\n      };\n    })\n  );\n\n  const [groupSummaryItems] = useState(\n    columns.map((column) => {\n      return {\n        name: column.name,\n        columnName: column.name,\n        type: \"custom\",\n        showInGroupFooter: false,\n        alignByColumn: true,\n      };\n    })\n  );\n\n  const [defaultHiddenColumnNames] = useState(\n    columns\n      .filter((column) => column.hideByDefault)\n      .map((column) => column.name)\n  );\n  const summaryCalculator = (type, rows, getValue) => {\n    if (type === \"custom\") {\n      if (!rows.length) {\n        return null;\n      }\n      return rows;\n    }\n    return rows;\n  };\n  const TempRowComponent = (props) => {\n    let groupedRowHeader = `Grouped Row`;\n    const columnName = props.row.groupedBy;\n    const columnInfo = columns.find((column) => column.name == columnName);\n    if (columnInfo) {\n      if (columnInfo.type === \"quantitative\") {\n        const group = grouping.find((group) => group.columnName === columnName);\n        if (props.row.value === true) {\n          // grab values from filters\n          groupedRowHeader = `Grouped on: ${columnName} [${toFixedTrunc(\n            group.groupMetaData.filterMin,\n            2\n          )},${toFixedTrunc(group.groupMetaData.filterMax, 2)}]`;\n        } else {\n          groupedRowHeader = `Grouped on: ${columnName} is outside of range [${toFixedTrunc(\n            group.groupMetaData.filterMin,\n            2\n          )}, ${toFixedTrunc(group.groupMetaData.filterMax, 2)}]`;\n        }\n      } else {\n        groupedRowHeader = `${columnName} is ${props.row.value}`;\n      }\n    }\n    return (\n      <React.Fragment>\n        <tr className={styles.groupHeaderRow}>\n          <td colSpan={42}>\n            <Typography\n              className={styles.groupHeaderContent}\n              variant={\"overline\"}>\n              {groupedRowHeader}\n            </Typography>\n          </td>\n        </tr>\n        <TableGroupRow.Row {...props}>{props.children}</TableGroupRow.Row>\n      </React.Fragment>\n    );\n  };\n  return (\n    <Paper>\n      <Grid rows={rows} columns={columns}>\n        <DragDropProvider />\n        <GroupingState\n          grouping={grouping}\n          onGroupingChange={setGrouping}\n          columnGroupingEnabled\n          columnExtensions={tableGroupColumnExtension}\n        />\n        <SummaryState groupItems={groupSummaryItems} />\n        <IntegratedGrouping\n          columnExtensions={integratedGroupingColumnExtensions}\n        />\n        <IntegratedSummary calculator={summaryCalculator} />\n        <FilteringState filters={filters} onFiltersChange={setFilters} />\n        <IntegratedFiltering\n          columnExtensions={filteringColumnExtensions}></IntegratedFiltering>\n        <SelectionState\n          selection={selection}\n          onSelectionChange={setSelection}\n        />\n        <IntegratedSelection />\n        <VirtualTable cellComponent={ProvenanceCells} height={1000} />\n        <TableColumnVisibility\n          defaultHiddenColumnNames={defaultHiddenColumnNames}\n        />\n        <TableColumnResizing columnWidths={defaultColumnWidths} />\n        <TableHeaderRow showGroupingControls />\n        <TableSelection showSelectAll />\n        <TableFilterRow cellComponent={FilterCells} />\n        <TableGroupRow\n          rowComponent={TempRowComponent}\n          columnExtensions={tableGroupColumnExtension}\n          summaryCellComponent={(props) => (\n            <GroupCellContent\n              columns={columns}\n              provenanceData={provenanceData}\n              {...props}></GroupCellContent>\n          )}\n          showColumnsWhenGrouped\n          stubCellComponent={(stubProps) => {\n            let shouldHideStub = false;\n            // if this stub prop matches last grouping\n\n            if (grouping.length > 0) {\n              const groupedByRow = stubProps.tableRow.row.groupedBy;\n              shouldHideStub =\n                grouping[grouping.length - 1].columnName === groupedByRow;\n            }\n            return (\n              <td\n                className=\"FAKETD\"\n                style={shouldHideStub ? { display: \"none\" } : null}></td>\n            );\n          }}\n          inlineSummaryComponent={() => {\n            return <div>temp div testing</div>;\n          }}\n        />\n        <Toolbar />\n        <ColumnChooser />\n        <GroupingPanel showGroupingControls></GroupingPanel>\n      </Grid>\n    </Paper>\n  );\n};\n\nfunction generateCategoricalScale(data, width) {\n  const uniqueValues = Array.from(new Set(data));\n  return d3.scaleBand().rangeRound([0, width]).padding(0).domain(uniqueValues);\n}\n\nfunction renderStimulusDefinition(provenanceData, stimulusColumnWidth) {\n  // TODO: Refactor to generalized\n  return {\n    title: \"Stimulus\",\n    name: \"visType\",\n    render: (rowData) => <span>{rowData.visType}</span>,\n    width: stimulusColumnWidth,\n  };\n}\n\nfunction renderUserIdColumn(provenanceData, userIdColumnWidth) {\n  return {\n    title: \"User Id\",\n    name: \"workerID\",\n    render: (rowData) => <span>{rowData.workerID}</span>,\n    width: userIdColumnWidth,\n    groupedSummaryComponent: () => <div></div>,\n  };\n}\n\n/**\n *\n * @param filter\n * @param value\n * @param accesssor\n */\nfunction filterCategoricalValue(filter, value, accesssor) {\n  if (!Array.isArray(value)) {\n    value = [value];\n  }\n  // for each value\n  let newValues = value;\n  if (accesssor) {\n    newValues = newValues.map(accesssor);\n  }\n  for (let i = 0; i < newValues.length; i++) {\n    if (Object.values(filter).includes(newValues[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction renderProvenanceNodeColumn(\n  currentProvenanceData,\n  eventColumnWidth,\n  handleProvenanceNodeClick\n) {\n  const eventWidth = 500;\n  const eventNodes = currentProvenanceData\n    .map((graph) => {\n      return graph.provenance.map((node) => node.event);\n    })\n    .flat()\n    .filter((item) => item !== \"startedProvenance\" && item !== \"Finished Task\");\n\n  let eventScale = generateCategoricalScale(eventNodes, eventWidth);\n\n  // Create mapping of event types to labels\n  const allObj = {};\n\n  Object.keys(eventMapping).forEach((eventKey) => {\n    allObj[eventKey] = eventMapping[eventKey].icon;\n  });\n\n  const ProvenanceSummary = ({ incomingData }) => {\n    const [partitionedData, setPartitionedData] = useState([]);\n    useEffect(() => {\n      if (incomingData && incomingData.length > 0) {\n        setPartitionedData(incomingData);\n      }\n    }, incomingData);\n\n    const partitionedNodes = partitionedData\n      .map((graph) => {\n        return graph.provenance.map((node) => node.event);\n      })\n      .flat()\n      .filter(\n        (item) => item !== \"startedProvenance\" && item !== \"Finished Task\"\n      );\n    if (partitionedNodes.length === 0) {\n      return <div></div>;\n    }\n    return (\n      <CategoricalFilter\n        width={eventWidth}\n        scale={eventScale}\n        labels={allObj}\n        data={partitionedNodes}></CategoricalFilter>\n    );\n  };\n\n  return {\n    title: \"Events Used\",\n    name: \"provenance\",\n    width: eventWidth,\n    cellStyle: {\n      maxWidth: eventWidth,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.provenance.length - b.provenance.length,\n    render: (renderData) =>\n      renderProvenanceNodeCell(renderData, handleProvenanceNodeClick),\n    customFilterAndSearch: (filter, value, row) => {\n      return filterCategoricalValue(filter, value, (node) => node.event);\n    },\n    groupedSummaryComponent: ({ incomingData }) => {\n      return (\n        <GroupDataResolver incomingData={incomingData}>\n          {({ partitionedData }) => {\n            const partitionedNodes = partitionedData\n              .map((graph) => {\n                return graph.provenance.map((node) => node.event);\n              })\n              .flat()\n              .filter(\n                (item) =>\n                  item !== \"startedProvenance\" && item !== \"Finished Task\"\n              );\n            if (partitionedNodes.length === 0) {\n              return <div></div>;\n            }\n            return (\n              <CategoricalFilter\n                width={eventWidth}\n                scale={eventScale}\n                labels={allObj}\n                data={partitionedNodes}></CategoricalFilter>\n            );\n          }}\n        </GroupDataResolver>\n      );\n    },\n    filterComponent: (props) => (\n      <CategoricalFilter\n        {...props}\n        width={eventWidth}\n        scale={eventScale}\n        labels={allObj}\n        data={eventNodes}></CategoricalFilter>\n    ),\n  };\n}\n\nconst GroupDataResolver = (props) => {\n  const { incomingData, children } = props;\n  const [partitionedData, setPartitionedData] = useState([]);\n  useEffect(() => {\n    if (incomingData && incomingData.length > 0) {\n      setPartitionedData(incomingData);\n    }\n  }, incomingData);\n  if (_.isFunction(children)) {\n    return children({ partitionedData });\n  }\n  return <div></div>;\n};\n\n/* Accuracy */\nfunction renderAccuracyCell(rowData, accuracyScale) {\n  return (\n    <svg width={100} height={20}>\n      <rect\n        x={accuracyScale(rowData.answer.accuracy)}\n        width={20}\n        height={20}></rect>\n    </svg>\n  );\n}\n\nfunction renderAccuracyColumn(currentProvenanceData, columnWidth) {\n  // TODO: Refactor to categorical or Numerical\n  let accuracyScale = generateCategoricalScale([\"1\", \"0\"], columnWidth);\n\n  return {\n    title: \"Accuracy\",\n    name: \"answer\",\n    width: columnWidth,\n    cellStyle: {\n      maxWidth: columnWidth,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.answer.accuracy - b.answer.accuracy,\n    render: (rowData) => renderAccuracyCell(rowData, accuracyScale),\n    customFilterAndSearch: (filter, value, row) => {\n      return filterCategoricalValue(\n        filter,\n        value,\n        (answer) => `${answer.accuracy}`\n      );\n    },\n    groupedSummaryComponent: ({ incomingData }) => {\n      return (\n        <GroupDataResolver incomingData={incomingData}>\n          {({ partitionedData }) => {\n            if (partitionedData.length === 0) {\n              return <div></div>;\n            }\n            return (\n              <CategoricalFilter\n                width={columnWidth}\n                scale={accuracyScale}\n                labels={{ \"1\": \"true\", \"0\": \"false\" }}\n                data={partitionedData.map(\n                  // TODO: fix from hard coded\n                  (graph) => graph.answer.correct\n                )}></CategoricalFilter>\n            );\n          }}\n        </GroupDataResolver>\n      );\n    },\n\n    filterComponent: (props) => (\n      <CategoricalFilter\n        {...props}\n        width={columnWidth}\n        scale={accuracyScale}\n        labels={{ \"1\": \"true\", \"0\": \"false\" }}\n        data={currentProvenanceData.map(\n          // TODO: fix from hard coded\n          (graph) => graph.answer.correct\n        )}></CategoricalFilter>\n    ),\n  };\n}\n\n/* Time */\nfunction renderTimeCell(rowData, timeScale) {\n  return (\n    <svg width={timeScale.range()?.[1]} height={20}>\n      <ProvenanceGraph performance={rowData} xScale={timeScale} />\n    </svg>\n  );\n}\nfunction renderTimeColumn(currentProvenanceData, columnWidth) {\n  const max = d3.max(currentProvenanceData, (datum) => datum.totalTime);\n  const timeScale = d3.scaleLinear().domain([0, max]).range([0, columnWidth]);\n\n  return {\n    title: \"Time To Complete\",\n    name: \"totalTime\",\n    width: columnWidth,\n    cellStyle: {\n      maxWidth: columnWidth,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.totalTime - b.totalTime,\n    render: (rowData) => renderTimeCell(rowData, timeScale),\n    customFilterAndSearch: (filter, value, row) => {\n      return filterQuantitativeValues(filter, value, row);\n    },\n    groupedSummaryComponent: ({ incomingData }) => {\n      return (\n        <GroupDataResolver incomingData={incomingData}>\n          {({ partitionedData }) => {\n            if (partitionedData.length === 0) {\n              return <div></div>;\n            }\n            return (\n              <QuantitativeFilter\n                xScale={timeScale}\n                data={partitionedData.map(\n                  (graph) => graph.totalTime\n                )}></QuantitativeFilter>\n            );\n          }}\n        </GroupDataResolver>\n      );\n    },\n    filterComponent: (props) => (\n      <QuantitativeFilter\n        {...props}\n        xScale={timeScale}\n        data={currentProvenanceData.map(\n          (graph) => graph.totalTime\n        )}></QuantitativeFilter>\n    ),\n  };\n}\n\nexport default DevExtremeTable;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport DevTable from \"./DevExtremeTable\";\nimport ProvenanceDataContext from \"./ProvenanceDataContext\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport LoaderStyles from \"./TableDataLoader.module.css\";\nimport Measure from \"react-measure\";\nimport { getSchema } from \"../fetchers/fetchMocks\";\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\nconst TableDataLoader = (props) => {\n  const [height, setHeight] = useState(1000);\n  const {\n    currentTaskData,\n    handleProvenanceNodeClick,\n    handleTagCreation,\n  } = useContext(ProvenanceDataContext);\n  const [tableSchema, setTableSchema] = useState(null);\n\n  let [isLoading, isError, schemaFromServer] = useFetchAPIData(async () => {\n    return await getSchema(\"Performance\");\n  }, []);\n\n  // Set Schema\n  useEffect(() => {\n    let tableSchema = schemaFromServer;\n\n    const hiddenColumns = [\"id\"];\n    // TODO: make this smart, if > column is highly variable, don't show.\n    const hideAggregate = [\"participantID\", \"answer\"];\n\n    if (tableSchema) {\n      // append the provenance sequence nodes onto the end of performance schema\n\n      tableSchema = tableSchema.concat({\n        COLUMN_NAME: \"sequence\",\n        DATA_TYPE: \"provenance\",\n        ORDINAL_POSITION: schemaFromServer.length,\n      });\n\n      tableSchema = tableSchema.concat({\n        COLUMN_NAME: \"notes\",\n        DATA_TYPE: \"tag\",\n        ORDINAL_POSITION: schemaFromServer.length + 2,\n      });\n\n      tableSchema = tableSchema.map((column) => {\n        column.hideAggregate = hideAggregate.includes(column);\n        return column;\n      });\n\n      tableSchema = tableSchema.filter(\n        (column) => !hiddenColumns.includes(column.COLUMN_NAME)\n      );\n    }\n\n    setTableSchema(tableSchema);\n  }, [schemaFromServer]);\n  console.log(\"tableschema\", tableSchema);\n  const dependenciesLoaded = !!(\n    currentTaskData &&\n    currentTaskData.length > 0 &&\n    tableSchema\n  );\n\n  return dependenciesLoaded ? (\n    <DevTable\n      provenanceData={currentTaskData}\n      tableSchema={tableSchema}\n      handleProvenanceNodeClick={handleProvenanceNodeClick}\n      handleTagCreation={handleTagCreation}></DevTable>\n  ) : (\n    <div>\n      <Measure\n        bounds\n        onResize={(contentRect) => {\n          setHeight(contentRect.bounds.height);\n        }}>\n        {(measureRef) => {\n          console.log(\"height\", height);\n          return (\n            <div ref={measureRef} className={LoaderStyles.loader}>\n              <Skeleton height={height} variant=\"rect\" animation=\"wave\" />\n            </div>\n          );\n        }}\n      </Measure>\n    </div>\n  );\n};\n\nexport default TableDataLoader;\n","import React, { useContext } from \"react\";\n\nimport TableDataLoader from \"../components/TableDataLoader\";\n\nconst Table = ({ location }) => {\n  return <TableDataLoader />;\n};\n\nexport default Table;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport styles from \"./Main.module.css\";\nimport _ from \"lodash\";\nimport { relativeProvenanceData } from \"./common/data/provenanceMocks.js\";\nimport MaterialTableWrapper from \"./components/ProvenanceTable\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport Home from \"./pages/Home\";\nimport Study from \"./pages/Study\";\nimport Upload from \"./pages/Upload\";\nimport Overview from \"./pages/Overview\";\nimport Export from \"./pages/Export\";\nimport Table from \"./pages/Table\";\n\nconst Main = ({ location }) => {\n  return (\n    <Wrapper>\n      <TransitionGroup className=\"transition-group\">\n        <CSSTransition key={location.key} timeout={500} classNames=\"fade\">\n          <section className=\"route-section\">\n            <Switch location={location}>\n              <Route path=\"/Home\" component={Home}></Route>\n              <Route path=\"/Study\" component={Study}></Route>\n              <Route path=\"/Upload\" component={Upload}></Route>\n              <Route path=\"/Overview\" component={Overview}></Route>\n              <Route path=\"/Table\" component={Table}></Route>\n              <Route path=\"/Export\" component={Export}></Route>\n            </Switch>\n          </section>\n        </CSSTransition>\n      </TransitionGroup>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  .fade-enter {\n    opacity: 0.01;\n  }\n\n  .fade-enter.fade-enter-active {\n    opacity: 1;\n    transition: opacity 300ms ease-in;\n  }\n\n  .fade-exit {\n    opacity: 1;\n  }\n\n  .fade-exit.fade-exit-active {\n    opacity: 0.01;\n    transition: opacity 300ms ease-in;\n  }\n\n  div.transition-group {\n    position: relative;\n  }\n\n  section.route-section {\n    position: absolute;\n    width: 100%;\n    top: 0;\n    left: 0;\n  }\n`;\nexport default withRouter(Main);\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from \"@material-ui/core/Typography\";\n\n\nexport default function CheckBox({condition,visible,checkBoxCallback}) {\n  const [checked, setChecked] = React.useState(true);\n\n  const handleChange = (evt) => {\n\n    evt.stopPropagation(); \n    checkBoxCallback(condition,evt.target.checked)\n    setChecked(evt.target.checked);\n  };\n  return (condition && visible ? <>\n      <Checkbox\n        checked={checked}\n        onChange={handleChange}\n        color=\"default\"\n        inputProps={{ 'aria-label': 'checkbox with default color' }}\n      />\n      <Typography\n                            // style={{ display: \"block\" }}\n                            color=\"primary\"\n                            variant=\"overline\">\n                            {condition}\n                        </Typography>\n      </> :null)\n    \n    {/* <div>\n      \n      <Checkbox\n        defaultChecked\n        color=\"primary\"\n        inputProps={{ 'aria-label': 'secondary checkbox' }}\n      />\n      <Checkbox inputProps={{ 'aria-label': 'uncontrolled-checkbox' }} />\n      <Checkbox disabled inputProps={{ 'aria-label': 'disabled checkbox' }} />\n      <Checkbox disabled checked inputProps={{ 'aria-label': 'disabled checked checkbox' }} />\n      <Checkbox\n        defaultChecked\n        indeterminate\n        inputProps={{ 'aria-label': 'indeterminate checkbox' }}\n      />\n      <Checkbox\n        defaultChecked\n        color=\"default\"\n        inputProps={{ 'aria-label': 'checkbox with default color' }}\n      />\n      <Checkbox\n        defaultChecked\n        size=\"small\"\n        inputProps={{ 'aria-label': 'checkbox with small size' }}\n      />\n    </div> */}\n\n}","import React, { useState, useContext } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport Grid, { GridSpacing } from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nimport SortIcon from '@material-ui/icons/Sort';\n\nimport CheckBox from '../components/CheckBox'\n\n\n\n// const useStyles = makeStyles((theme: Theme) =>\n//     createStyles({\n//         root: {\n//             // backgroundColor: theme.palette.background.paper,\n//             'padding-top': 0,\n//             'padding-bottom': 0\n//         },\n//     }),\n// );\n\n\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        flexGrow: 1,\n        padding:'0px'\n    },\n    table: {\n        padding: \"10px\",\n    },\n    condition: {\n        fontSize: \"1em\",\n        color:\"white\",\n        paddingTop:\"10px\",\n        cursor:'pointer'\n    },\n    sort:{\n        cursor:'pointer',\n        marginTop:'16px', \n        marginLeft:'5px'\n    },\n    bullet: {\n        display: \"inline-block\",\n        margin: \"0 2px\",\n        transform: \"scale(0.8)\",\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nfunction MenuWrapper({option,index,handleMenuItemClickCallback,setHoveredRowCallback,hoveredRow,selectedIndex,conditions}){\n\n    let initialState = {}\n    conditions.map(c=>initialState[c] = true)\n    const [filterConditions,setConditions] = useState(initialState)\n\n    function checkBoxCallback(condition,checked){\n        let currentState = {... filterConditions}\n        currentState[condition]=checked;\n        setConditions(currentState)\n        \n    }\n\n    let checkboxes = conditions.map(c=><CheckBox key = {c} visible = {(index == hoveredRow || index == selectedIndex ) && option.type !== 'global'} condition ={c} checkBoxCallback={checkBoxCallback}></CheckBox>) \n\n    return (<MenuItem\n    key={option.prompt}\n    // disabled={index === 0}\n    selected={index === selectedIndex}\n    onClick={(event) => handleMenuItemClickCallback(event, index,{desc:true, metric:option['key'],conditions:filterConditions})}\n    onMouseEnter={()=>setHoveredRowCallback(index)}\n    onMouseLeave={()=>setHoveredRowCallback(selectedIndex)}\n>\n    {<div style={{ 'width': '150px' }} > <Typography\n        // style={{ display: \"block\" }}\n        color=\"primary\"\n        variant=\"overline\">\n        {option.prompt}\n    </Typography></div>} \n    <div onClick={(evt)=>evt.stopPropagation()}>\n    {checkboxes}\n        </div> \n    \n</MenuItem>)\n}\n\n\nexport default function SortMenu() {\n\n    \n    const { metrics, conditions,setHomeTaskSort } = useContext(ProvenanceDataContext);\n\n\n    let options = [{ prompt: 'by Task Name', key: 'name' , type:'global'}]; \n\n    if (metrics){\n        Object.keys(metrics).map(m=>options.push({ prompt: 'by ' + m, key: m , type:'metric'}))\n    }\n        \n        // { prompt: 'by Task ', key: 'accuracy' },\n        // { prompt: 'by task completion time', key: 'time' },\n        // { prompt: 'by difference in performance across conditions', key: 'diff' }\n\n\n    // console.log('metrics are ', metrics)\n\n    // console.log('conditions', conditions)\n\n\n\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n\n    const handleClickListItem = (event: React.MouseEvent<HTMLElement>) => {\n        // console.log('handleClickListItem')\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuItemClick = (event: React.MouseEvent<HTMLElement>, index: number, sortObj) => {\n        setSelectedIndex(index);\n        setHomeTaskSort(sortObj)\n        // console.log('handleMenuItemClick')\n\n        // setTaskSort(options[index].key)\n        setAnchorEl(null);\n\n    };\n\n    let [hoveredRow,setHoveredRow] = useState(selectedIndex)\n\n    let setHoveredRowCallback = (value)=>{\n        setHoveredRow (value)\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    return ( !conditions ? <></> : \n        <div className={classes.root} style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n            <List component=\"nav\" aria-label=\"Sort tasks\" className={classes.root}>\n                <ListItem\n                    button\n                    aria-haspopup=\"true\"\n                    aria-controls=\"lock-menu\"\n                    aria-label=\"Sort tasks\"\n                    onClick={handleClickListItem}\n                >\n                    <ListItemText primary=\"Sort tasks\" secondary={options[selectedIndex].prompt} />\n                </ListItem>\n            </List>\n            <Menu\n                id=\"lock-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {options.map((option, index) => (\n                  <MenuWrapper key={option.prompt} hoveredRow={hoveredRow} selectedIndex= {selectedIndex} conditions= {conditions} setHoveredRowCallback={setHoveredRowCallback} handleMenuItemClickCallback = {handleMenuItemClick} option={option} index={index}></MenuWrapper>  \n                ))}\n            </Menu>\n        </div>\n    );\n}\n\n    // <>\n\n       // const classes = useStyles();\n\n    // function MetricAxis({ data, axisLength }) {\n    //     let padding = 20\n    //     let width  = axisLength + 2*padding\n    //     let height = 50\n    //     return typeof(data.range[0]) == 'string' ? null : <svg height={height} width={width}>\n    //         <line\n    //             x1={padding}\n    //             y1={height/2}\n    //             x2={axisLength+padding}\n    //             y2={height/2}\n    //             style={{ stroke: \"white\", strokeWidth: 1 }}></line>\n    //             <text\n    //             style={{\n    //               fontSize: \"1em\",\n    //               textAnchor: \"middle\",\n    //               fill:\"white\" ,\n    //                 fontWeight:'400'               }}\n               \n    //             x={padding+axisLength/2}\n    //             y={height/2-5}>\n    //             {\" \"}\n    //             {data.metric.toUpperCase()}{\" \"}\n    //           </text>\n\n\n    //             <text\n    //             style={{\n    //               fontSize: \"1em\",\n    //               textAnchor: \"end\",\n    //               fill:\"white\" ,\n    //               alignmentBaseline:'middle'                 }}\n                 \n    //             x={padding - 3}\n    //             y={height/2}>\n    //             {\" \"}\n    //             {data.range[0]}{\" \"}\n    //           </text>\n    //           <text\n    //             style={{\n    //               fontSize: \"1em\",\n    //               textAnchor: \"start\",\n    //               fill:\"white\" ,\n    //             alignmentBaseline:'middle'               }}\n               \n    //             x={axisLength+padding}\n    //             y={height/2}>\n    //             {\" \"}\n    //             {data.range[1]}{\" \"}\n    //           </text>\n    //           <g style={{transform:\"translate(\" + (padding + axisLength/2) + 'px,' + (height/2 + 5) + 'px)'}}>   \n    //           <SortIcon  width={'16px'} height={'16px'} className={classes.sort}></SortIcon>\n\n    //           </g>\n              \n\n\n    //     </svg>\n    // }\n\n    //     <React.Fragment key={'Menu'}>\n\n    //         <Grid container className={classes.root} spacing={2}>\n    //             <Grid item xs={12}>\n    //                 <Grid container justify=\"flex-start\" spacing={2}>\n\n    //                     {/* <Grid key={\"condition\"} item>\n    //                         <Box height={rowHeight} width={572} mt={\"5px\"} mb={\"6px\"} mr={'10px'} boxShadow={0} style={{ fontWeight:'bolder' }}>\n    //                             <Typography className={classes.condition} variant=\"overline\">\n    //                             <SortIcon/> Condition\n    //                         </Typography>                            </Box>\n\n    //                     </Grid> */}\n\n    //                     <Grid key={\"tasks\"} item>\n    //                         <Box height={rowHeight} width={572} pt={\"5px\"} pb={\"6px\"} pr={'10px'} boxShadow={0} style={{ display:'inline-flex', fontWeight:'bolder'  }}>\n    //                             <Typography\n    //                                 className={classes.condition}\n    //                                 variant=\"overline\">\n    //                                 Task Name\n    //                              </Typography>\n    //                              <SortIcon className={classes.sort}></SortIcon>\n                                 \n    //                         </Box>\n    //                         </Grid>\n\n\n    //                     <Grid key={\"actions\"} item>\n    //                         <Box height={rowHeight} width={375} pt={\"5px\"} pb={\"6px\"} pr={'10px'} boxShadow={0} style={{ display:'inline-flex', fontWeight:'bolder'  }}>\n    //                             <Typography\n    //                                 className={classes.condition}\n    //                                 variant=\"overline\">\n    //                                 Interaction Sequence Length\n    //                              </Typography>\n    //                              <SortIcon className={classes.sort}></SortIcon>\n\n                                 \n    //                         </Box>\n\n    //                         <Box height={rowHeight} width={250} mt={\"5px\"} mb={\"6px\"} mr={'10px'} boxShadow={0} style={{display:'inline-flex',  fontWeight:'bolder'  }}>\n    //                             <Typography\n    //                                 className={classes.condition}\n    //                                 variant=\"overline\">\n    //                                  Participant Count\n    //                              </Typography>\n    //                              <SortIcon className={classes.sort}></SortIcon>\n\n                                 \n    //                         </Box>\n\n    //                     </Grid>\n    //                     <Grid key={\"metrics\"} style={{display:'inline-flex'}} item>\n\n    //                     {!metrics ? <></> : Object.keys(metrics).map(metric=>{\n    //                         let range = metrics[metric];\n    //                         let labelLength = metric.length * 10;\n    //                     return  <Box height={rowHeight} mt={\"5px\"} mb={\"6px\"} mr={'15px'} boxShadow={0} style={{display:'inline-flex',   fontWeight:'bolder'  }}>\n    //                         {/* <Typography\n    //                             className={classes.condition}\n    //                             variant=\"overline\">\n    //                              {metric}\n    //                             </Typography> */}\n    //                             <MetricAxis data={{metric,range}} axisLength={labelLength}></MetricAxis>\n\n    //                     </Box>\n    //                     })\n    //                 }\n\n    //                     {/* <Box height={rowHeight} mt={\"5px\"} mb={\"6px\"} mr={'15px'} boxShadow={0} style={{display:'inline-flex',   fontWeight:'bolder'  }}>\n    //                         <Typography\n    //                             className={classes.condition}\n    //                             variant=\"overline\">\n    //                              Choose Metrics\n    //                             </Typography>\n    //                     </Box> */}\n\n\n    //                     </Grid>\n\n    //                 </Grid>\n    //             </Grid>\n    //         </Grid>\n    //     </React.Fragment>\n\n    // </>\n\n\n\n","import React from \"react\";\nimport { createStyles, makeStyles, useTheme, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nimport Box from '@material-ui/core/Box';\n\nimport styles from \"./SidePane.module.css\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CloudUpload from \"@material-ui/icons/CloudUpload\";\nimport TableChart from \"@material-ui/icons/TableChart\";\nimport GetApp from \"@material-ui/icons/GetApp\";\nimport BarChart from \"@material-ui/icons/BarChart\";\nimport { Link, LinkProps, useLocation } from \"react-router-dom\";\nimport ProvenanceDataContext from \"./components/ProvenanceDataContext\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport ComputerIcon from '@material-ui/icons/Computer';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport SortMenu from './components/sortMenu'\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    typography: {\n      // In Chinese and Japanese the characters are usually larger,\n      // so a smaller fontsize may be appropriate.\n      fontSize: 18,\n    },\n    appBar: {\n      \"background-color\": '#ababab',\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: 36,\n    },\n    hide: {\n      display: 'none',\n    },\n\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    drawerClose: {\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      overflowX: 'hidden',\n      width: theme.spacing(7) + 1,\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9) + 1,\n      },\n    },\n    toolbar: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n  }),\n);\n\n\nconst SidePane = ({ }) => {\n  const {\n    taskStructure,\n    handleChangeSelectedTaskId,\n    selectedTaskIds\n  } = React.useContext(ProvenanceDataContext);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n\n  const HomeLink = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Home\" {...props} />);\n  const StudyLink = React.forwardRef<\n  HTMLAnchorElement,\n  Omit<LinkProps, \"innerRef\" | \"to\">\n>((props, ref) => <Link innerRef={ref as any} to=\"/Study\" {...props} />);\n  const Upload = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Upload\" {...props} />);\n  const Overview = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Overview\" {...props} />);\n  const Table = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Table\" {...props} />);\n  const Export = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Export\" {...props} />);\n\n\n  let taskInfo = taskStructure.find(t => t.key == selectedTaskIds[0]);\n\n\n  let location = useLocation();\n  function appBarWidget() {\n    if (location.pathname.includes('Home')) {\n      return <SortMenu></SortMenu>\n    } else {\n      return <>\n        <FormControl className={styles.SelectedTaskInput}>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={selectedTaskIds[0]}\n            onChange={handleChangeSelectedTaskId}\n            label=\"name\">\n            {taskStructure.map((value) => {\n              return (\n                <MenuItem key={value.key} value={value.key}>\n                  {value.name}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n        <Box ml={3} >\n          <Typography variant=\"button\" noWrap dangerouslySetInnerHTML={{ __html: taskInfo.prompt }} >\n          </Typography>\n        </Box>\n      </>\n    }\n  }\n\n  function makeIcon(item) {\n    let isCurrent = location.pathname.includes(item.id);\n    const Icon = item.icon\n    return isCurrent ? <Icon style={{ color: 'rgb(93, 131, 210)' }}> </Icon> : <Icon></Icon>\n  }\n\n  return (<div className={classes.root}>\n    <CssBaseline />\n    <AppBar\n      position=\"fixed\"\n      className={clsx(classes.appBar, {\n        [classes.appBarShift]: open,\n      })}\n    >\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={handleDrawerOpen}\n          edge=\"start\"\n          className={clsx(classes.menuButton, {\n            [classes.hide]: open,\n          })}\n        >\n          <MenuIcon />\n        </IconButton>\n\n        {appBarWidget()}\n        {/* {taskInfo.prompt} */}\n\n\n\n      </Toolbar>\n    </AppBar>\n    <Drawer\n      variant=\"permanent\"\n      className={clsx(classes.drawer, {\n        [classes.drawerOpen]: open,\n        [classes.drawerClose]: !open,\n      })}\n      classes={{\n        paper: clsx({\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        }),\n      }}\n    >\n      <div className={classes.toolbar}>\n        <IconButton onClick={handleDrawerClose}>\n          {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n        </IconButton>\n\n      </div>\n      <Divider />\n      <List>\n        {/* <ListItem component={HomeLink}>\n          <img className={styles.logo} src={\"./Experi.png\"}></img>\n        </ListItem> */}\n        {[\n          { text: \"Home\", id: \"Home\", link: HomeLink, icon: HomeIcon },\n          { text: \"Study\", id: \"Study\", link: StudyLink, icon: ComputerIcon },\n          { text: \"Upload\", id: \"Upload\", link: Upload, icon: CloudUpload },\n          { text: \"Provenance Prep \", id: \"Overview\", link: Overview, icon: BarChart },\n          {\n            text: \"Provenance Analysis\",\n            link: Table,\n            id: \"Table\",\n            icon: TableChart,\n          },\n          { text: \"Export\", link: Export, icon: GetApp },\n        ].map((item, index) => {\n          return (\n            //added key={index} to get rid of unique key error\n            <React.Fragment key={index}>\n              <ListItem button component={item.link}>\n                <ListItemIcon>{makeIcon(item)}</ListItemIcon>\n                <ListItemText primary={item.text} />\n              </ListItem>\n            </React.Fragment>\n          );\n        })}\n      </List>\n\n      <Divider />\n    </Drawer>\n\n  </div>)\n\n};\n\nexport default SidePane;\n","import React from \"react\";\nimport { MemoryRouter, Link as RouterLink } from \"react-router-dom\";\nimport styles from \"./App.module.css\";\nimport Main from \"./Main\";\nimport SidePane from \"./SidePane\";\nimport \"antd/dist/antd.css\";\nimport { ProvenanceDataContextProvider } from \"./components/ProvenanceDataContext\";\n//import { fetchProvenance } from \"./firebase/fetchData\";\n//fetchProvenance();\nfunction App() {\n  return (\n    <div className=\"App\">\n      {\n\n        <ProvenanceDataContextProvider>\n          <MemoryRouter initialEntries={[\"/Home\"]} initialIndex={0}>\n            <div className={styles.container}>\n              <div className={styles.sidePane}>\n                <SidePane></SidePane>\n              </div>\n              <div className={styles.main}>\n                <Main></Main>\n              </div>\n            </div>\n          </MemoryRouter>\n        </ProvenanceDataContextProvider>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}