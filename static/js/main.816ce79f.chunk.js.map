{"version":3,"sources":["App.module.css","components/ProvenanceIsolatedNodes.module.css","SidePane.module.css","common/data/taskPartitioned sync /^/.//.*/.json$","common/data/provenanceMocks.js","pages/Upload.tsx","pages/Overview.tsx","pages/Export.tsx","components/eventMapping.js","components/EventFrequencies.tsx","components/GroupedNodes.tsx","components/ProvenanceNode.tsx","components/ProvenanceNodes.tsx","components/ProvenanceGraph.tsx","components/ProvenanceIsolatedNodes.tsx","components/reactTagWrapper.tsx","components/TableFilters.tsx","components/ProvenanceTable.tsx","pages/Table.tsx","Main.tsx","SidePane.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Upload","Overview","Export","taskIds","allTaskData","i","length","push","require","provset","Set","unrelativeProvenanceData","relativeProvenanceData","forEach","taskData","unrelativeProvData","filter","value","data","provGraphs","entireProvGraph","Array","isArray","startTime","stopTime","trimmedProvGraph","provenanceNode","trimmedNode","event","time","Date","target","trigger","add","totalTime","node","absoluteTime","sort","nodeA","nodeB","Math","random","trimProvGraph","longestTime","d3","d","_","cloneDeep","provGraph","scale","colors","answerSelectColor","dragColor","sortColor","selectColor","searchColor","clearColor","eventMapping","answerBox","name","color","icon","width","height","attrRow","SvgGrid","currentCol","currentRow","items","itemHeight","itemWidth","gridHeight","gridWidth","maxRows","floor","maxColumns","numberItems","numberColumns","numberRows","ceil","console","warn","gridItems","itemCounter","leftPadding","transform","onClick","log","className","EventFrequencies","frequencies","scaleFactor","icons","eventName","index","undefined","fontFamily","fontSize","GroupedNodes","classifier","groupedNodes","rectStartX","barHeight","x","r","baseElement","y","fill","rx","eventFreq","item","info","String","reduce","counter","p","hasOwnProperty","ProvenanceNode","circle","renderIcons","opacity","ProvenanceNodes","provenanceGraph","xScale","eventType","provNodes","xExtents","nodes","start","minimumNodeWidth","stop","yOffset","provElements","ProvenanceGraph","collapseEvents","React","useState","showEvents","setShowEvents","useEffect","bars","type","eventTypes","size","key","IsolatedNode","Tooltip","TransitionComponent","Fade","TransitionProps","timeout","title","PopperProps","popperOptions","modifiers","offset","enabled","arrow","ProvenanceIsolatedNodes","styles","wrapper","TagWrapper","tags","onTagChange","isMaster","autofocus","allowNew","handleDelete","tag","slice","splice","handleAddition","CategoricalFilter","labels","columnDef","onFilterChanged","occurrences","useMemo","arr","j","obtainItemCounts","currentFilter","setCurrentFilter","maxOccurance","values","a","b","yScale","domain","range","tableData","entries","includes","pointerEvents","indexOfValue","indexOf","temp","assign","cursor","Histogram","max","niceX","nice","buckets","binner","xBand","bucket","binWidth","bandwidth","x0","Brush","props","brushRef","useRef","onBrushFunction","onChange","current","dayBrush","brushX","extent","on","selection","select","selectAll","enter","append","attr","call","ref","children","BrushableHistogram","setMinimum","setMaximum","inputs","invert","TimeFilter","minimum","maximum","debouncedMin","useDebounce","debouncedMax","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","tableIcons","Add","forwardRef","Check","Clear","Delete","DetailPanel","Edit","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","MaterialTableWrapper","provenanceData","checkedTags","setCheckedTags","rerender","setRerender","datum","field","cellStyle","maxWidth","padding","customSort","render","customFilterAndSearch","filterResults","checked","filterComponent","TimeFilterObj","graph","timeColumn","generateCategoricalScale","uniqueValues","from","rangeRound","correctScale","eventNodes","flat","eventScale","allObj","eventKey","correctWidth","correct","rowData","true","false","eventsCol","action","findIndex","iterTag","notesColumn","components","Actions","style","display","float","backgroundColor","Action","myComponent","ActionComponent","columns","onSelectionChange","selections","actions","removed","existing","find","tooltip","evt","datumTagIndex","currentTag","options","search","paging","filtering","maxBodyHeight","Table","location","newData","dataArr","concat","Wrapper","styled","div","withRouter","TransitionGroup","CSSTransition","classNames","path","component","SidePane","HomeLink","innerRef","to","Drawer","variant","anchor","Divider","List","ListItem","logo","src","text","link","Fragment","button","ListItemIcon","ListItemText","primary","App","initialEntries","initialIndex","container","sidePane","main","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.816ce79f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"header\":\"App_header__3ZZ1n\",\"logo\":\"App_logo__1ItuU\",\"sidePane\":\"App_sidePane__3RleR\",\"main\":\"App_main__3ZkGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProvenanceIsolatedNodes_wrapper__3cJfW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"SidePane_logo__3vZO1\"};","var map = {\n\t\"./S-task01.json\": 444,\n\t\"./S-task010.json\": 445,\n\t\"./S-task011.json\": 446,\n\t\"./S-task012.json\": 447,\n\t\"./S-task02.json\": 448,\n\t\"./S-task03.json\": 449,\n\t\"./S-task04.json\": 450,\n\t\"./S-task05.json\": 451,\n\t\"./S-task06.json\": 452,\n\t\"./S-task07.json\": 453,\n\t\"./S-task08.json\": 454,\n\t\"./S-task09.json\": 455\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 443;","//import allProvenanceData from \"./allProvenanceMocks.js\";\n//import task1Data from './task1ProvData.js'l\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nlet taskIds = [\"S-task01\", \"S-task02\", \"S-task03\", \"S-task04\", \"S-task05\", \"S-task06\", \"S-task07\", \"S-task08\", \"S-task09\", \"S-task010\", \"S-task011\", \"S-task012\"]\n\nlet allTaskData = [];\nfor (let i = 0; i < taskIds.length; i++) {\n  allTaskData.push(require(`./taskPartitioned/${taskIds[i]}.json`));\n}\n\nlet allProvData = [];\nconst allData = {\n  id: \"58c84d506d1c600001a09319_S-task01\",\n  data: {\n    id: \"58c84d506d1c600001a09319\",\n    initialSetup: \"Mon Aug 26 2019 21:27:06 GMT-0700 (Pacific Daylight Time)\",\n    mode: \"study\",\n    provGraphs: [{\n        clicked: [],\n        count: 0,\n        endTime: \"\",\n        nodes: \"\",\n        search: \"\",\n        selections: {\n          answerBox: {},\n          attrRow: {},\n          cellcol: {},\n          cellrow: {},\n          colLabel: {},\n          neighborSelect: {},\n          previousMouseovers: [],\n          rowLabel: {},\n          search: {},\n        },\n        sortKey: \"statuses_count\",\n        startTime: 1566880025209,\n        taskID: {\n          answer: {\n            nodes: [],\n            value: \"\",\n          },\n          answerKey: {\n            id: [\"18704160\"],\n            nodes: [\"T.J\"],\n          },\n          config: {\n            adjMatrix: {\n              edgeBars: true,\n              neighborHighlightColor: \"\",\n              neighborSelect: true,\n              sortKey: \"statuses_count\",\n              toggle: false,\n            },\n            adjMatrixValues: {},\n            attributeScales: {\n              edge: {\n                count: {\n                  domain: [1, 5],\n                  label: \"# Interactions\",\n                },\n                type: {\n                  domain: [\"mentions\", \"retweet\", \"interacted\"],\n                  label: \"Edge Type\",\n                  range: [\"#ff2700\", \"#008fd5\", \"rgb(91, 91, 91)\"],\n                },\n              },\n              node: {\n                continent: {\n                  domain: [\"North America\", \"South America\", \"Europe\", \"Asia\"],\n                  glyph: \"square\",\n                  label: \"Continent\",\n                  legendLabels: [\"NA\", \"SA\", \"EU\", \"AS\"],\n                  range: [\"#5ba3d0\", \"#7d6dcb\", \"#ce9333\", \"#6aa858\"],\n                },\n                count_followers_in_query: {\n                  domain: [0, 35],\n                  label: \"In-Network followers\",\n                },\n                favourites_count: {\n                  domain: [0, 8000],\n                  label: \"Likes\",\n                },\n                followers_count: {\n                  domain: [0, 1200],\n                  label: \"Followers\",\n                },\n                friends_count: {\n                  domain: [0, 1200],\n                  label: \"Friends\",\n                },\n                listed_count: {\n                  domain: [0, 120],\n                  label: \"In Lists\",\n                },\n                memberFor_days: {\n                  domain: [175, 4498],\n                  label: \"Acct. Age\",\n                },\n                query_tweet_count: {\n                  domain: [0, 10],\n                  label: \"On-topic Tweets\",\n                },\n                selected: {\n                  domain: [true, false],\n                  glyph: \"rect\",\n                  label: \"selected\",\n                  labels: [\"answer\", \"not answer\"],\n                  range: [\"#e86b45\", \"#fff\"],\n                },\n                statuses_count: {\n                  domain: [0, 5500],\n                  label: \"Tweets\",\n                },\n                type: {\n                  domain: [\"person\", \"institution\"],\n                  glyph: \"circle\",\n                  label: \"Type\",\n                  legendLabels: [\"Person\", \"Inst.\"],\n                  range: [\"#e86b45\", \"#514ed9\"],\n                },\n              },\n            },\n            edgeAttributes: [\"type\"],\n            graphFiles: {\n              cluster: \"data/network_large_undirected_singleEdge_cytoscape.json\",\n              large_directed_multiEdge: \"data/network_large_directed_multiEdge.json\",\n              large_undirected_multiEdge: \"data/network_large_undirected_multiEdge.json\",\n              large_undirected_singleEdge: \"data/network_large_undirected_singleEdge.json\",\n              sample: \"data/s_network_small_undirected_singleEdge.json\",\n              small_directed_multiEdge: \"data/network_small_directed_multiEdge.json\",\n              small_undirected_multiEdge: \"data/network_small_undirected_multiEdge.json\",\n              small_undirected_singleEdge: \"data/network_small_undirected_singleEdge.json\",\n            },\n            graphSize: \"large\",\n            isDirected: false,\n            isMultiEdge: false,\n            loadedGraph: \"large_undirected_singleEdge\",\n            nodeAttributes: [\"selected\", \"continent\", \"statuses_count\"],\n            nodeIsRect: true,\n            nodeLink: {\n              drawBars: false,\n              edgeStrokeAttr: \"type\",\n              edgeWidthAttr: null,\n              labelAttr: \"shortName\",\n              labelSize: 12,\n              noEdgeColor: \"rgb(91, 91, 91)\",\n              noNodeFill: \"rgb(153, 191, 195)\",\n              noNodeStroke: \"#c8c8c8\",\n              nodeFillAttr: \"continent\",\n              nodeHeight: 40,\n              nodeSizeAttr: \"statuses_count\",\n              nodeWidth: 40,\n              quantColors: [\n                \"#7b7cb1\",\n                \"#01a068\",\n                \"#bf8531\",\n                \"#5472cf\",\n                \"#4d8615\",\n                \"#d63d61\",\n                \"#ae76ed\",\n                \"#f26336\",\n              ],\n              selectNeighbors: true,\n            },\n            state: {\n              adjMatrix: {},\n            },\n            style: {\n              hoveredNodeColor: \"#fde8ca\",\n              selectedEdgeColor: \"#e86b45\",\n              selectedNodeColor: \"#e86b45\",\n            },\n          },\n          hypothesis: \"Distractor Effect Hypothesis, Attribute Sorting Hypothesis\",\n          order: 4,\n          prompt: \"Find the <span class='attribute'>North American</span> with the <span class='attribute'>most Tweets</span>\",\n          replyCount: 1,\n          replyType: [\"singleNodeSelection\"],\n          startTime: \"Mon Aug 26 2019 21:27:04 GMT-0700 (Pacific Daylight Time)\",\n          taskID: \"S-task01\",\n          taxonomy: {\n            target: \"single node\",\n            type: \"TGA\",\n          },\n          workerID: \"58c84d506d1c600001a09319\",\n        },\n        time: 1566880025209,\n        workerID: \"58c84d506d1c600001a09319\",\n      },\n      {\n        clicked: [],\n        count: 0,\n        endTime: \"\",\n        event: \"answerBox\",\n        nodes: \"\",\n        search: \"\",\n        selections: {\n          answerBox: {\n            \"18704160\": [\"answerBox\"],\n          },\n          attrRow: {},\n          cellcol: {},\n          cellrow: {},\n          colLabel: {},\n          neighborSelect: {},\n          previousMouseovers: [],\n          rowLabel: {},\n          search: {},\n        },\n        sortKey: \"statuses_count\",\n        startTime: 1566880025209,\n        taskID: {\n          answer: {\n            nodes: [],\n            value: \"\",\n          },\n          answerKey: {\n            id: [\"18704160\"],\n            nodes: [\"T.J\"],\n          },\n          config: {\n            adjMatrix: {\n              edgeBars: true,\n              neighborHighlightColor: \"\",\n              neighborSelect: true,\n              sortKey: \"statuses_count\",\n              toggle: false,\n            },\n            adjMatrixValues: {},\n            attributeScales: {\n              edge: {\n                count: {\n                  domain: [1, 5],\n                  label: \"# Interactions\",\n                },\n                type: {\n                  domain: [\"mentions\", \"retweet\", \"interacted\"],\n                  label: \"Edge Type\",\n                  range: [\"#ff2700\", \"#008fd5\", \"rgb(91, 91, 91)\"],\n                },\n              },\n              node: {\n                continent: {\n                  domain: [\"North America\", \"South America\", \"Europe\", \"Asia\"],\n                  glyph: \"square\",\n                  label: \"Continent\",\n                  legendLabels: [\"NA\", \"SA\", \"EU\", \"AS\"],\n                  range: [\"#5ba3d0\", \"#7d6dcb\", \"#ce9333\", \"#6aa858\"],\n                },\n                count_followers_in_query: {\n                  domain: [0, 35],\n                  label: \"In-Network followers\",\n                },\n                favourites_count: {\n                  domain: [0, 8000],\n                  label: \"Likes\",\n                },\n                followers_count: {\n                  domain: [0, 1200],\n                  label: \"Followers\",\n                },\n                friends_count: {\n                  domain: [0, 1200],\n                  label: \"Friends\",\n                },\n                listed_count: {\n                  domain: [0, 120],\n                  label: \"In Lists\",\n                },\n                memberFor_days: {\n                  domain: [175, 4498],\n                  label: \"Acct. Age\",\n                },\n                query_tweet_count: {\n                  domain: [0, 10],\n                  label: \"On-topic Tweets\",\n                },\n                selected: {\n                  domain: [true, false],\n                  glyph: \"rect\",\n                  label: \"selected\",\n                  labels: [\"answer\", \"not answer\"],\n                  range: [\"#e86b45\", \"#fff\"],\n                },\n                statuses_count: {\n                  domain: [0, 5500],\n                  label: \"Tweets\",\n                },\n                type: {\n                  domain: [\"person\", \"institution\"],\n                  glyph: \"circle\",\n                  label: \"Type\",\n                  legendLabels: [\"Person\", \"Inst.\"],\n                  range: [\"#e86b45\", \"#514ed9\"],\n                },\n              },\n            },\n            edgeAttributes: [\"type\"],\n            graphFiles: {\n              cluster: \"data/network_large_undirected_singleEdge_cytoscape.json\",\n              large_directed_multiEdge: \"data/network_large_directed_multiEdge.json\",\n              large_undirected_multiEdge: \"data/network_large_undirected_multiEdge.json\",\n              large_undirected_singleEdge: \"data/network_large_undirected_singleEdge.json\",\n              sample: \"data/s_network_small_undirected_singleEdge.json\",\n              small_directed_multiEdge: \"data/network_small_directed_multiEdge.json\",\n              small_undirected_multiEdge: \"data/network_small_undirected_multiEdge.json\",\n              small_undirected_singleEdge: \"data/network_small_undirected_singleEdge.json\",\n            },\n            graphSize: \"large\",\n            isDirected: false,\n            isMultiEdge: false,\n            loadedGraph: \"large_undirected_singleEdge\",\n            nodeAttributes: [\"selected\", \"continent\", \"statuses_count\"],\n            nodeIsRect: true,\n            nodeLink: {\n              drawBars: false,\n              edgeStrokeAttr: \"type\",\n              edgeWidthAttr: null,\n              labelAttr: \"shortName\",\n              labelSize: 12,\n              noEdgeColor: \"rgb(91, 91, 91)\",\n              noNodeFill: \"rgb(153, 191, 195)\",\n              noNodeStroke: \"#c8c8c8\",\n              nodeFillAttr: \"continent\",\n              nodeHeight: 40,\n              nodeSizeAttr: \"statuses_count\",\n              nodeWidth: 40,\n              quantColors: [\n                \"#7b7cb1\",\n                \"#01a068\",\n                \"#bf8531\",\n                \"#5472cf\",\n                \"#4d8615\",\n                \"#d63d61\",\n                \"#ae76ed\",\n                \"#f26336\",\n              ],\n              selectNeighbors: true,\n            },\n            state: {\n              adjMatrix: {},\n            },\n            style: {\n              hoveredNodeColor: \"#fde8ca\",\n              selectedEdgeColor: \"#e86b45\",\n              selectedNodeColor: \"#e86b45\",\n            },\n          },\n          hypothesis: \"Distractor Effect Hypothesis, Attribute Sorting Hypothesis\",\n          order: 4,\n          prompt: \"Find the <span class='attribute'>North American</span> with the <span class='attribute'>most Tweets</span>\",\n          replyCount: 1,\n          replyType: [\"singleNodeSelection\"],\n          startTime: \"Mon Aug 26 2019 21:27:04 GMT-0700 (Pacific Daylight Time)\",\n          taskID: \"S-task01\",\n          taxonomy: {\n            target: \"single node\",\n            type: \"TGA\",\n          },\n          workerID: \"58c84d506d1c600001a09319\",\n        },\n        time: 1566880110088,\n        workerID: \"58c84d506d1c600001a09319\",\n      },\n      {\n        clicked: [],\n        count: 0,\n        endTime: \"\",\n        event: \"Finished Task\",\n        nodes: \"\",\n        search: \"\",\n        selections: {\n          answerBox: {\n            \"18704160\": [\"answerBox\"],\n          },\n          attrRow: {},\n          cellcol: {},\n          cellrow: {},\n          colLabel: {},\n          neighborSelect: {},\n          previousMouseovers: [{\n              event: \"attrRow18704160\",\n              time: 1566880110855,\n            },\n            {\n              event: \"cell190726679_1068137549355515900\",\n              time: 1566880111007,\n            },\n            {\n              event: \"cell190726679_270431596\",\n              time: 1566880111044,\n            },\n            {\n              event: \"cell9527212_79908341\",\n              time: 1566880111091,\n            },\n            {\n              event: \"cell91169926_1055379531731796000\",\n              time: 1566880111140,\n            },\n            {\n              event: \"cell15208867_4058687172\",\n              time: 1566880111167,\n            },\n            {\n              event: \"cell14905766_743468486756868100\",\n              time: 1566880111191,\n            },\n            {\n              event: \"cell3230388598_711885257549680600\",\n              time: 1566880111216,\n            },\n            {\n              event: \"cell18406335_711885257549680600\",\n              time: 1566880111241,\n            },\n            {\n              event: \"cell10414152_711885257549680600\",\n              time: 1566880111723,\n            },\n            {\n              event: \"cell10414152_158685605\",\n              time: 1566880113574,\n            },\n            {\n              event: \"cell18406335_1667081238\",\n              time: 1566880113601,\n            },\n            {\n              event: \"cell11493602_4893004803\",\n              time: 1566880113625,\n            },\n            {\n              event: \"cell22766040_1658560038\",\n              time: 1566880113650,\n            },\n            {\n              event: \"cell22766040_1873322353\",\n              time: 1566880113675,\n            },\n            {\n              event: \"cell22766040_30009655\",\n              time: 1566880113990,\n            },\n            {\n              event: \"cell84043985_2596138699\",\n              time: 1566880114013,\n            },\n            {\n              event: \"cell84043985_241173920\",\n              time: 1566880114037,\n            },\n            {\n              event: \"cell84043985_49457800\",\n              time: 1566880114064,\n            },\n            {\n              event: \"cell84043985_208312922\",\n              time: 1566880114089,\n            },\n            {\n              event: \"cell84043985_18325271\",\n              time: 1566880114114,\n            },\n            {\n              event: \"cell84043985_16557883\",\n              time: 1566880114139,\n            },\n            {\n              event: \"cell84043985_11493602\",\n              time: 1566880114162,\n            },\n            {\n              event: \"cell84043985_15208867\",\n              time: 1566880114186,\n            },\n            {\n              event: \"cell21084111_9527212\",\n              time: 1566880114211,\n            },\n            {\n              event: \"cell6146692_318046158\",\n              time: 1566880114236,\n            },\n            {\n              event: \"rowLabel6146692\",\n              time: 1566880114260,\n            },\n          ],\n          rowLabel: {},\n          search: {},\n        },\n        sortKey: \"statuses_count\",\n        startTime: 1566880025209,\n        taskID: {\n          answer: {\n            nodes: [],\n            value: \"\",\n          },\n          answerKey: {\n            id: [\"18704160\"],\n            nodes: [\"T.J\"],\n          },\n          config: {\n            adjMatrix: {\n              edgeBars: true,\n              neighborHighlightColor: \"\",\n              neighborSelect: true,\n              sortKey: \"statuses_count\",\n              toggle: false,\n            },\n            adjMatrixValues: {},\n            attributeScales: {\n              edge: {\n                count: {\n                  domain: [1, 5],\n                  label: \"# Interactions\",\n                },\n                type: {\n                  domain: [\"mentions\", \"retweet\", \"interacted\"],\n                  label: \"Edge Type\",\n                  range: [\"#ff2700\", \"#008fd5\", \"rgb(91, 91, 91)\"],\n                },\n              },\n              node: {\n                continent: {\n                  domain: [\"North America\", \"South America\", \"Europe\", \"Asia\"],\n                  glyph: \"square\",\n                  label: \"Continent\",\n                  legendLabels: [\"NA\", \"SA\", \"EU\", \"AS\"],\n                  range: [\"#5ba3d0\", \"#7d6dcb\", \"#ce9333\", \"#6aa858\"],\n                },\n                count_followers_in_query: {\n                  domain: [0, 35],\n                  label: \"In-Network followers\",\n                },\n                favourites_count: {\n                  domain: [0, 8000],\n                  label: \"Likes\",\n                },\n                followers_count: {\n                  domain: [0, 1200],\n                  label: \"Followers\",\n                },\n                friends_count: {\n                  domain: [0, 1200],\n                  label: \"Friends\",\n                },\n                listed_count: {\n                  domain: [0, 120],\n                  label: \"In Lists\",\n                },\n                memberFor_days: {\n                  domain: [175, 4498],\n                  label: \"Acct. Age\",\n                },\n                query_tweet_count: {\n                  domain: [0, 10],\n                  label: \"On-topic Tweets\",\n                },\n                selected: {\n                  domain: [true, false],\n                  glyph: \"rect\",\n                  label: \"selected\",\n                  labels: [\"answer\", \"not answer\"],\n                  range: [\"#e86b45\", \"#fff\"],\n                },\n                statuses_count: {\n                  domain: [0, 5500],\n                  label: \"Tweets\",\n                },\n                type: {\n                  domain: [\"person\", \"institution\"],\n                  glyph: \"circle\",\n                  label: \"Type\",\n                  legendLabels: [\"Person\", \"Inst.\"],\n                  range: [\"#e86b45\", \"#514ed9\"],\n                },\n              },\n            },\n            edgeAttributes: [\"type\"],\n            graphFiles: {\n              cluster: \"data/network_large_undirected_singleEdge_cytoscape.json\",\n              large_directed_multiEdge: \"data/network_large_directed_multiEdge.json\",\n              large_undirected_multiEdge: \"data/network_large_undirected_multiEdge.json\",\n              large_undirected_singleEdge: \"data/network_large_undirected_singleEdge.json\",\n              sample: \"data/s_network_small_undirected_singleEdge.json\",\n              small_directed_multiEdge: \"data/network_small_directed_multiEdge.json\",\n              small_undirected_multiEdge: \"data/network_small_undirected_multiEdge.json\",\n              small_undirected_singleEdge: \"data/network_small_undirected_singleEdge.json\",\n            },\n            graphSize: \"large\",\n            isDirected: false,\n            isMultiEdge: false,\n            loadedGraph: \"large_undirected_singleEdge\",\n            nodeAttributes: [\"selected\", \"continent\", \"statuses_count\"],\n            nodeIsRect: true,\n            nodeLink: {\n              drawBars: false,\n              edgeStrokeAttr: \"type\",\n              edgeWidthAttr: null,\n              labelAttr: \"shortName\",\n              labelSize: 12,\n              noEdgeColor: \"rgb(91, 91, 91)\",\n              noNodeFill: \"rgb(153, 191, 195)\",\n              noNodeStroke: \"#c8c8c8\",\n              nodeFillAttr: \"continent\",\n              nodeHeight: 40,\n              nodeSizeAttr: \"statuses_count\",\n              nodeWidth: 40,\n              quantColors: [\n                \"#7b7cb1\",\n                \"#01a068\",\n                \"#bf8531\",\n                \"#5472cf\",\n                \"#4d8615\",\n                \"#d63d61\",\n                \"#ae76ed\",\n                \"#f26336\",\n              ],\n              selectNeighbors: true,\n            },\n            state: {\n              adjMatrix: {},\n            },\n            style: {\n              hoveredNodeColor: \"#fde8ca\",\n              selectedEdgeColor: \"#e86b45\",\n              selectedNodeColor: \"#e86b45\",\n            },\n          },\n          hypothesis: \"Distractor Effect Hypothesis, Attribute Sorting Hypothesis\",\n          order: 4,\n          prompt: \"Find the <span class='attribute'>North American</span> with the <span class='attribute'>most Tweets</span>\",\n          replyCount: 1,\n          replyType: [\"singleNodeSelection\"],\n          startTime: \"Mon Aug 26 2019 21:27:04 GMT-0700 (Pacific Daylight Time)\",\n          taskID: \"S-task01\",\n          taxonomy: {\n            target: \"single node\",\n            type: \"TGA\",\n          },\n          workerID: \"58c84d506d1c600001a09319\",\n        },\n        time: \"Mon Aug 26 2019 21:28:37 GMT-0700 (Pacific Daylight Time)\",\n        workerID: \"58c84d506d1c600001a09319\",\n      },\n    ],\n    update: \"Mon Aug 26 2019 21:28:37 GMT-0700 (Pacific Daylight Time)\",\n  },\n};\n//S - task01;\n//const allProvenanceData = [allData];\nlet provDataForTask = [];\nlet provset = new Set()\nlet unrelativeProvenanceData = [],\n  relativeProvenanceData = [];\nallTaskData.forEach(taskData => {\n  let forTaskFilter = taskData.filter(value => value.data.provGraphs);\n  /*allProvenanceData.filter((run) =>\n    run.id.includes(\"S-task01\")\n  );*/\n\n  function trimProvGraph(entireProvGraph) {\n    if (!entireProvGraph || !Array.isArray(entireProvGraph)) {\n      return;\n    }\n    let trimmedProvGraph = {};\n    let startTime, stopTime;\n    trimmedProvGraph[\"nodes\"] = entireProvGraph.map((provenanceNode) => {\n      let trimmedNode = {};\n\n      trimmedNode.event = provenanceNode.event ?\n        provenanceNode.event :\n        \"startedProvenance\";\n      trimmedNode.time = new Date(provenanceNode.time);\n      if (trimmedNode.event === \"startedProvenance\") {\n        startTime = new Date(provenanceNode.time);\n      }\n      if (trimmedNode.event === \"Finished Task\") {\n        stopTime = new Date(provenanceNode.time); //provenanceNode.time;\n      }\n      trimmedNode.target = null; // to display meta info about event target (ie node 'J_heer')\n      trimmedNode.trigger = null; // to display meta info about event trigger (ie click, drag, etc)\n      provset.add(trimmedNode.event);\n      return trimmedNode;\n    });\n    const totalTime = stopTime - startTime;\n    trimmedProvGraph[\"nodes\"].forEach(node => {\n\n      node.time = (node.time - startTime) / (totalTime); // relative time\n      node.absoluteTime = (node.time - startTime);\n    })\n    trimmedProvGraph[\"nodes\"].sort((nodeA, nodeB) => nodeA.time - nodeB.time)\n\n\n    trimmedProvGraph[\"startTime\"] = (startTime - startTime) / (totalTime); // 0\n    trimmedProvGraph[\"stopTime\"] = (stopTime - startTime) / (totalTime); // 1\n    trimmedProvGraph[\"totalTime\"] = totalTime;\n    trimmedProvGraph[\"correct\"] = Math.random() > .4 ? 'true' : 'false'; //60% accuracy, true and false string are used to keep data inline with categorical variables.\n\n    return trimmedProvGraph;\n  }\n\n  // find the person with longest time, \n  let unrelativeProvData = forTaskFilter.map((value) => {\n    return trimProvGraph(value.data.provGraphs);\n  });\n\n  let longestTime = d3.max(unrelativeProvData, d => {\n    if (d) {\n      return d.totalTime;\n    }\n    return 0;\n\n  });\n  if (unrelativeProvData.length === 0) {\n    return;\n  }\n  //unrelativeProvData = unrelativeProvData.filter(data => data.length > 0)\n  unrelativeProvenanceData.push(_.cloneDeep(unrelativeProvData))\n\n  //if (true) {\n  relativeProvenanceData.push(unrelativeProvData.map(provGraph => {\n    let scale = longestTime / provGraph.totalTime;\n    provGraph[\"startTime\"] = provGraph[\"startTime\"] / (scale);\n    provGraph[\"stopTime\"] = provGraph[\"stopTime\"] / (scale);\n    provGraph[\"nodes\"] = provGraph[\"nodes\"].map(node => {\n      node['time'] = node[\"time\"] / scale;\n\n      return node;\n    })\n    return provGraph;\n  }));\n  //} else {\n  //provData = unrelativeProvData;\n  //}\n  //allProvData.push(provData);\n  //const provData = allData.data.provGraphs;\n})\n\n\nexport {\n  relativeProvenanceData,\n  unrelativeProvenanceData\n};","import React from \"react\";\n\nconst Upload = () => {\n  return <div>This Is upload</div>;\n};\n\nexport default Upload;\n","import React from \"react\";\n\nconst Overview = () => {\n  return <div>This is overview</div>;\n};\n\nexport default Overview;\n","import React from \"react\";\n\nconst Export = () => {\n  return <div>This is Export</div>;\n};\n\nexport default Export;\n","import React from 'react';\nimport Add from \"@material-ui/icons/Add\";\nimport PanTool from \"@material-ui/icons/PanTool\";\nimport Sort from \"@material-ui/icons/Sort\";\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport Search from \"@material-ui/icons/Search\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Start from \"@material-ui/icons/Star\";\nconst colors = [\"#c6e0d6\", \"#8fcab4\", \"#67aca9\", \"#5d83d2\", \"#6b56dd\", \"#9e93a1\"];\n// generated from https://leonardocolor.io/?colorKeys=%235b89d2%2C%235dbb9c%2C%23723ce7%2C%238e18b9&base=ffffff&ratios=1.4%2C1.64%2C2.12%2C2.80%2C3.71%2C4.88%2C6.35%2C9.00&mode=CAM02\nconst answerSelectColor = colors[0];\nconst dragColor = colors[1];\nconst sortColor = colors[2];\nconst selectColor = colors[3];\nconst searchColor = colors[4];\nconst clearColor = colors[5];\n\nconst eventMapping = {\n  answerBox: {\n    name: \"Add\",\n    color: answerSelectColor,\n    icon: < Add width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"Hard Selected a Node\": {\n    name: \"Add\",\n    color: answerSelectColor,\n\n    icon: < Add width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"Dragged Node\": {\n    name: \"PanTool\",\n    color: dragColor,\n    icon: < PanTool width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  sort: {\n    name: \"Sort\",\n    color: sortColor,\n    icon: < Sort width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  attrRow: {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"Hard Unselected a Node\": {\n    name: \"RadioButtonUncheckedIcon\",\n    color: answerSelectColor,\n    icon: < RadioButtonUncheckedIcon width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"Select Node\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"rowLabel\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"colLabel\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"search\": {\n    name: \"Search\",\n    color: searchColor,\n    icon: < Search width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"Searched for Node\": {\n    name: \"Search\",\n    color: searchColor,\n    icon: < Search width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"cell\": {\n    name: \"FiberManualRecordIcon\",\n    color: selectColor,\n    icon: < FiberManualRecordIcon width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"Unselect Node\": {\n    name: \"RadioButtonUncheckedIcon\",\n    color: selectColor,\n    icon: < RadioButtonUncheckedIcon width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"clear\": {\n    name: \"Clear\",\n    color: clearColor,\n    icon: < Clear width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"cleared all selected nodes\": {\n    name: \"Clear\",\n    color: clearColor,\n    icon: < Clear width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"startedProvenance\": {\n    name: \"Start\",\n    color: 'rgb(255,255,255)',\n    icon: < Start width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  },\n  \"Finished Task\": {\n    name: \"Start\",\n    color: 'rgb(255,255,255)',\n    icon: < Start width = {\n      16\n    }\n    height = {\n      16\n    }\n    /> \n  }\n};\n\nexport default eventMapping;","import React, { useRef, useEffect } from \"react\";\nimport eventMapping from \"./eventMapping.js\";\nimport Icon from \"@material-ui/core/Icon\";\n\nimport ThreeDRotation from \"@material-ui/icons/ThreeDRotation\";\n\nimport GroupedNodes from \"./GroupedNodes\";\nimport * as d3 from \"d3\";\nimport chroma from \"chroma-js\";\n\nconst EventFrequencies = ({ frequencies, scaleFactor, width, height }: any) => {\n  const icons = Object.keys(frequencies).map((eventName, index) => {\n    let icon;\n    if (eventMapping[eventName] !== undefined) {\n      icon = eventMapping[eventName].icon;\n    } else {\n      icon = <ThreeDRotation width={24} height={24}></ThreeDRotation>;\n    }\n\n    //let xTranslate = finish - start < 48 ? -12 : 0;\n    scaleFactor = 0.75;\n    const iconSize = 16;\n\n    return (\n      <g transform={`scale(${scaleFactor})`}>\n        {icon}\n        <g transform={`translate(${iconSize},${5 + iconSize / 2})`}>\n          <text fontFamily={\"Roboto\"} fontSize={\"14\"}>\n            {frequencies[eventName]}\n          </text>\n        </g>\n      </g>\n    );\n  });\n\n  return (\n    <SvgGrid\n      items={icons}\n      itemHeight={12}\n      itemWidth={24}\n      gridWidth={width}\n      gridHeight={height}></SvgGrid>\n  );\n};\n\nconst SvgGrid = ({ items, itemHeight, itemWidth, gridHeight, gridWidth }) => {\n  let maxRows = Math.floor(gridHeight / itemHeight);\n  let maxColumns = Math.floor(gridWidth / itemWidth);\n\n  let numberItems = items.length;\n\n  let numberColumns = numberItems > maxColumns ? maxColumns : numberItems;\n  let numberRows =\n    numberItems === numberColumns ? 1 : Math.ceil(numberItems / numberColumns);\n  if (numberItems > maxRows * maxColumns) {\n    // render ...\n    console.warn(\"over number of items on\", items);\n  }\n\n  //\n  let currentCol, currentRow;\n  let gridItems = [];\n  let itemCounter = 0;\n  for (currentRow = 0; currentRow < numberRows; currentRow++) {\n    //\n    let isLastRow = currentRow + 1 == numberRows;\n    let startingCol = 0;\n    let leftPadding = 0;\n    let allPadding = 0;\n    if (isLastRow) {\n      let numberItemsRemaining = numberItems - itemCounter;\n      let padding = maxColumns - numberItemsRemaining;\n      leftPadding = padding / 2;\n      //startingCol = Math.floor(padding / 2);\n      //leftPadding = Math.floor(padding / 2);\n      //allPadding = padding;\n    }\n\n    for (currentCol = startingCol; currentCol < numberColumns; currentCol++) {\n      gridItems.push(\n        <g\n          transform={`translate(${(currentCol + leftPadding) * itemWidth},${\n            currentRow * itemHeight\n          })`}\n          onClick={() => {}}>\n          {items[itemCounter]}\n        </g>\n      );\n      itemCounter++;\n    }\n  }\n  if (gridItems.length === 0) {\n    console.log(\n      \"NOITEMS\",\n      numberItems,\n      numberColumns,\n      numberRows,\n      \"mc\",\n      maxColumns,\n      \"mr\",\n      maxRows\n    );\n  }\n  return (\n    <g className={\"svggrid\"} onClick={() => {}}>\n      {gridItems}\n    </g>\n  );\n};\n\nexport default EventFrequencies;\n","import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport chroma from \"chroma-js\";\nimport EventFrequencies from \"./EventFrequencies\";\nconst svgWidth = 200;\nconst svgHeight = 100;\nconst margin = { top: 5, right: 5, bottom: 5, left: 5 };\n\nfunction count(ary, classifier) {\n  classifier = classifier || String;\n  return ary.reduce(function (counter, item) {\n    var p = classifier(item);\n    counter[p] = counter.hasOwnProperty(p) ? counter[p] + 1 : 1;\n    return counter;\n  }, {});\n}\n\nconst GroupedNodes = ({ groupedNodes, barHeight }: any) => {\n  const rectStartX = groupedNodes[0].x;\n  const rectFinishX = groupedNodes[groupedNodes.length - 1].x;\n  // if width can't accomodate all actions, expand\n  let width = rectFinishX - rectStartX;\n  const height = groupedNodes[0].r * 2;\n  const y = groupedNodes[0].y - height / 2;\n  const color = \"lightgray\";\n  const baseElement = (\n    <g>\n      <rect\n        y={0}\n        height={height}\n        width={width + groupedNodes[0].r}\n        fill={color}\n        rx={10}></rect>\n    </g>\n  );\n  const eventFreq = count(groupedNodes, function (item) {\n    return item.info;\n  });\n  let scaleFactor = width / 24;\n  scaleFactor = 1; /*Object.keys(eventFreq).length;\n  if (scaleFactor > 0.7) {\n    scaleFactor = 0.7;\n  } else if (scaleFactor < 0.5) {\n    scaleFactor = 0.5;\n  }*/\n  return (\n    <g>\n      {baseElement}\n      <EventFrequencies\n        frequencies={eventFreq}\n        scaleFactor={scaleFactor}\n        width={width + groupedNodes[0].r}\n        height={height}></EventFrequencies>\n    </g>\n  );\n};\n\nexport default GroupedNodes;\n","import React, { useRef, useEffect } from \"react\";\nimport eventMapping from \"./eventMapping.js\";\nimport Icon from \"@material-ui/core/Icon\";\nimport FileCloudDownload from \"material-ui/core/Icons\";\nimport ThreeDRotation from \"@material-ui/icons/ThreeDRotation\";\n\nimport GroupedNodes from \"./GroupedNodes\";\nimport * as d3 from \"d3\";\nimport chroma from \"chroma-js\";\n\nconst ProvenanceNode = ({ circle, barHeight, renderIcons }: any) => {\n  let node;\n  const height = barHeight - 10;\n\n  if (renderIcons) {\n    let iconSize = barHeight / 2;\n    // Note when rendering other things in svgs, you must only render things that are svg elements can render- they can't render most react components\n    let icon;\n    if (eventMapping[circle.info] !== undefined) {\n      icon = eventMapping[circle.info].icon;\n    } else {\n      icon = <ThreeDRotation width={24} height={24}></ThreeDRotation>;\n    }\n    const y = circle.y - height / 2;\n    const color = \"lightgray\";\n    const width = 21;\n    node = (\n      <g>\n        <rect\n          y={0}\n          x={0}\n          height={height}\n          width={width}\n          fill={color}\n          rx={10}></rect>\n        <g transform={`translate(${2},${14})`}>{icon}</g>\n      </g>\n    );\n  } else {\n    node = (\n      <rect\n        width={3}\n        x={0}\n        height={height}\n        color={\"black\"}\n        opacity={0.25}></rect>\n    );\n  }\n\n  return <g>{node}</g>;\n};\n\nexport default ProvenanceNode;\n","import React, { useRef, useEffect } from \"react\";\nimport GroupedNodes from \"./GroupedNodes\";\nimport ProvenanceNode from \"./ProvenanceNode\";\nimport * as d3 from \"d3\";\nimport chroma from \"chroma-js\";\n\nconst svgWidth = 200;\nconst svgHeight = 100;\nconst margin = { top: 5, right: 5, bottom: 5, left: 5 };\n\nconst ProvenanceNodes = ({\n  provenanceGraph,\n  xScale,\n  renderIcons,\n  eventType,\n}: any) => {\n  if (!provenanceGraph) {\n    return <div></div>;\n  }\n\n  let margin = { top: 5, right: 5, bottom: 5, left: 5 },\n    width = svgWidth - margin.right - margin.left,\n    height = svgHeight - margin.top - margin.bottom;\n  // set domains, needs to take in axis from parent to scale all\n\n  const barHeight = 60;\n  const yOffset = 0;\n\n  let provNodes = [];\n  let xExtents = [];\n  let minimumNodeWidth = 24;\n\n  // calculate groupings. Pass each grouping into <Grouping Etren\n  let currentGroup = [];\n\n  provenanceGraph.nodes.forEach((node) => {\n    if (\n      node.event === \"startedProvenance\" ||\n      node.event === \"Finished Task\" ||\n      (eventType && eventType !== \"overall\" && eventType !== node.event)\n    ) {\n      return;\n    }\n\n    xExtents.push({\n      start: xScale(node.time) - minimumNodeWidth / 2,\n      stop: xScale(node.time) + minimumNodeWidth / 2,\n    });\n\n    provNodes.push({\n      x: xScale(node.time * provenanceGraph.totalTime),\n      y: yOffset + barHeight / 2,\n      r: minimumNodeWidth,\n      fill: \"lightgray\",\n      info: node.event,\n    });\n  });\n  let provElements = [];\n  if (renderIcons) {\n    for (let i = 0; i < provNodes.length; i++) {\n      let d = provNodes[i];\n\n      let item;\n      // if not last node and this element overlaps with next\n      if (i < xExtents.length - 1 && xExtents[i].stop > xExtents[i + 1].start) {\n        let groupedNodes = [];\n        let data = d;\n        // start grouping\n        groupedNodes.push(data);\n        // a group starts\n        while (\n          provNodes.length - 1 > i &&\n          xExtents[i].stop > xExtents[i + 1].start\n        ) {\n          data = provNodes[i + 1];\n          groupedNodes.push(data);\n          i++;\n        }\n        data = provNodes[i];\n        //groupedNodes.push(data);\n        item = (\n          <GroupedNodes\n            groupedNodes={groupedNodes}\n            barHeight={barHeight}></GroupedNodes>\n        );\n      } else {\n        item = (\n          <ProvenanceNode\n            circle={d}\n            barHeight={barHeight}\n            renderIcons={true}></ProvenanceNode>\n        );\n      }\n      provElements.push(\n        <g transform={`translate(${d.x - d.r},${0})`}>{item}</g>\n      );\n    }\n  } else {\n    for (let i = 0; i < provNodes.length; i++) {\n      let d = provNodes[i];\n      let item = (\n        <ProvenanceNode\n          circle={d}\n          barHeight={barHeight}\n          renderIcons={false}></ProvenanceNode>\n      );\n\n      provElements.push(<g transform={`translate(${d.x},${0})`}>{item}</g>);\n    }\n  }\n\n  // for any\n\n  // Note when rendering other things in svgs, you must only render things that are svg elements can render- they can't render most react components\n  return <g>{provElements}</g>;\n};\n\nexport default ProvenanceNodes;\n","import React, { useRef, useEffect } from \"react\";\nimport ProvenanceNodes from \"./ProvenanceNodes\";\nimport eventMapping from \"./eventMapping\";\nimport * as d3 from \"d3\";\nimport chroma from \"chroma-js\";\n\nconst ProvenanceGraph = ({\n  provenanceGraph,\n  xScale,\n  renderIcons,\n  collapseEvents,\n}) => {\n  const [showEvents, setShowEvents] = React.useState(!collapseEvents);\n\n  React.useEffect(() => {\n    setShowEvents(!collapseEvents);\n  }, [collapseEvents]);\n\n  const svgWidth = 250;\n  let svgHeight = 75;\n\n  if (!provenanceGraph) {\n    return <div></div>;\n  }\n\n  const barHeight = 50;\n  const yOffset = 0;\n  const bars = [\n    {\n      x: 0,\n      y: yOffset,\n      width: xScale(provenanceGraph.totalTime),\n      height: barHeight,\n      fill: \"gray\",\n      type: \"overall\",\n    },\n  ];\n\n  let provNodes = [];\n  let eventTypes = new Set();\n  provenanceGraph.nodes.forEach((node) => {\n    if (node.event === \"startedProvenance\" || node.event === \"Finished Task\") {\n      return;\n    }\n    eventTypes.add(node.event);\n    provNodes.push({\n      x: xScale(node.absoluteTime),\n      y: yOffset + barHeight / 2,\n      r: barHeight / 3,\n      fill: \"whitesmoke\",\n    });\n  });\n  if (showEvents) {\n    svgHeight = svgHeight * (eventTypes.size + 1);\n    let counter = 1;\n    eventTypes.forEach((type) => {\n      bars.push({\n        x: 0,\n        y: (barHeight + 10) * counter,\n        width: xScale(provenanceGraph.totalTime),\n        height: barHeight,\n        fill: \"lightgray\",\n        type: type,\n      });\n      counter++;\n    });\n  }\n\n  // Note when rendering other things in svgs, you must only render things that are svg elements can render- they can't render most react components\n  return bars.map((d, i) => {\n    return (\n      <g>\n        <rect key={i} width={d.width} height={d.height} fill={d.fill} />\n        <ProvenanceNodes\n          provenanceGraph={provenanceGraph}\n          xScale={xScale}\n          renderIcons={renderIcons && d.type === \"overall\"}\n          eventType={d.type}></ProvenanceNodes>\n      </g>\n    );\n  });\n};\n\nexport default ProvenanceGraph;\n","import React from \"react\";\nimport eventMapping from \"./eventMapping.js\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fade from \"@material-ui/core/Fade\";\nimport styles from \"./ProvenanceIsolatedNodes.module.css\";\nconst ProvenanceIsolatedNodes = ({ nodes }) => {\n  return (\n    <div className={styles.wrapper}>\n      {nodes.map((node) => (\n        <IsolatedNode node={node}></IsolatedNode>\n      ))}\n    </div>\n  );\n};\n\nconst IsolatedNode = ({ node }) => {\n  const icon = eventMapping[node.event].icon;\n\n  return node.event !== \"startedProvenance\" &&\n    node.event !== \"Finished Task\" ? (\n    <Tooltip\n      TransitionComponent={Fade}\n      TransitionProps={{ timeout: 600 }}\n      title={node.event}\n      PopperProps={{\n        popperOptions: {\n          modifiers: {\n            offset: {\n              enabled: true,\n              offset: \"0px, -6px\",\n            },\n          },\n        },\n      }}\n      arrow>\n      <svg width={34} height={34}>\n        <rect\n          x={0}\n          y={0}\n          width={30}\n          height={30}\n          rx={5}\n          fill={eventMapping[node.event].color}></rect>\n        <g transform={`translate(7,5)`}>{icon}</g>\n      </svg>\n    </Tooltip>\n  ) : (\n    <div></div>\n  );\n};\n\nexport default ProvenanceIsolatedNodes;\n","import React from \"react\";\nimport ReactTags from \"react-tag-autocomplete\";\nimport \"./reacttags.css\";\n\nconst TagWrapper = ({ tags, onTagChange, isMaster }) => {\n  function handleAddTag(tag) {\n    onTagChange(\"Add\", tag);\n  }\n  function handleDeleteTag(i) {\n    const allTags = tags.slice(0);\n    const tag = allTags.splice(i, 1);\n    onTagChange(\"Delete\", tag);\n  }\n  return (\n    <ReactTags\n      autofocus={false}\n      tags={tags}\n      allowNew={true}\n      handleDelete={handleDeleteTag}\n      handleAddition={handleAddTag}\n    />\n  );\n};\nexport default TagWrapper;\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { select, event } from \"d3-selection\";\nimport { scaleLinear } from \"d3-scale\";\nimport { brushX } from \"d3-brush\";\nimport { axisBottom } from \"d3-axis\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fade from \"@material-ui/core/Fade\";\n\nfunction obtainItemCounts(arr) {\n  let occurrences = {};\n  for (let i = 0, j = arr.length; i < j; i++) {\n    occurrences[arr[i]] = (occurrences[arr[i]] || 0) + 1;\n  }\n  return occurrences;\n}\nexport const CategoricalFilter = ({\n  data,\n  width,\n  scale,\n  labels,\n  columnDef,\n  onFilterChanged,\n}) => {\n  const occurrences = useMemo(() => obtainItemCounts(data), [data]);\n  // search through data for all states\n  const [currentFilter, setCurrentFilter] = useState(Object.keys(occurrences));\n  const height = 20;\n  const fullHeight = 20 + 15;\n  console.log(\"labels\", labels);\n  const maxOccurance = Object.values(occurrences).reduce((a, b) =>\n    a > b ? a : b\n  );\n  const yScale = d3.scaleLinear().domain([0, maxOccurance]).range([0, height]);\n  useEffect(() => {\n    onFilterChanged(columnDef.tableData.id, currentFilter);\n  }, [currentFilter]);\n\n  return (\n    <svg width={width} height={fullHeight}>\n      {Object.entries(occurrences).map(([key, value], index) => {\n        console.log(\"dywootto,\", key === true, value);\n        //key = key === \"true\" ? true : false;\n        console.log(\"labelkey\", key, labels[key]);\n        const color = currentFilter.includes(key) ? \"black\" : \"#cfcfcf\";\n        return (\n          <Tooltip\n            TransitionComponent={Fade}\n            TransitionProps={{ timeout: 600 }}\n            title={key}\n            PopperProps={{\n              popperOptions: {\n                modifiers: {\n                  offset: {\n                    enabled: true,\n                    offset: \"0px, -6px\",\n                  },\n                },\n              },\n            }}>\n            <g\n              pointerEvents={\"bounding-box\"}\n              onClick={() => {\n                const indexOfValue = currentFilter.indexOf(key);\n                let temp = Object.assign([], currentFilter);\n\n                if (indexOfValue > -1) {\n                  temp.splice(indexOfValue, 1);\n                } else {\n                  temp.push(key);\n                }\n                setCurrentFilter(temp);\n              }}\n              cursor={\"pointer\"}\n              fill={\"none\"}>\n              <rect\n                x={scale(key)}\n                width={20}\n                height={yScale(value)}\n                y={height - yScale(value)}\n                fill={color}></rect>\n\n              <g transform={`translate(${scale(key)},${height})`} fill={color}>\n                {labels[key]}\n              </g>\n            </g>\n          </Tooltip>\n        );\n      })}\n    </svg>\n  );\n};\n\nexport const Histogram = ({ data, width, height }) => {\n  const max = d3.max(data),\n    min = d3.min(data);\n\n  // the scale\n  let x = d3.scaleLinear().range([0, width - 10]);\n  let y = d3.scaleLinear().range([height - 2, 0]);\n  let niceX = d3.scaleLinear().range([0, width]).domain([0, max]).nice();\n  const binner = d3.histogram().domain(niceX.domain());\n  const buckets = binner(data);\n  let xBand = d3\n    .scaleBand()\n    .domain(d3.range(0, buckets.length))\n    .range([0, width]);\n\n  x.domain([0, d3.max(data)]);\n  y.domain([0, d3.max(buckets, (bucket) => bucket.length)]);\n  const binWidth = xBand.bandwidth();\n  const bars = (\n    <g transform={`translate(${(1 / 3) * binWidth},0)`}>\n      {buckets.map((bucket, index) => {\n        return (\n          <rect\n            key={index}\n            x={x(bucket.x0) - 0.5 * binWidth} // 1/2 xBandwidth to move to middle 1/2 another because of -1 index on xBand domain\n            y={y(bucket.length)}\n            width={binWidth}\n            height={height - y(bucket.length)}></rect>\n        );\n      })}\n    </g>\n  );\n\n  return bars;\n};\n\nconst Brush = (props) => {\n  const width = props.width;\n  const scale = props.scale;\n  const height = props.height;\n  const brushRef = useRef(null);\n  const onBrushFunction = props.onChange;\n  //const width = props.width;\n  //const scale = scaleLinear().domain([0, 30]).range([0, width]);\n  useEffect(() => {\n    const node = brushRef.current;\n\n    const dayBrush = brushX()\n      .extent([\n        [0, 0],\n        [width, height],\n      ])\n      //.on(\"brush\", brushed)\n      .on(\"end\", cleared);\n\n    select(node)\n      .selectAll(\"g.brush\")\n      .data([0])\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"brush\");\n\n    select(node).select(\"g.brush\").call(dayBrush);\n\n    /*\n    Code for updating brush if we want it to dynamically update while brushing\n    function brushed() {\n      console.warn(event);\n      onBrushFunction(event.selection);\n    }*/\n    function cleared() {\n      console.warn(\"clear\", event);\n      onBrushFunction(event.selection);\n    }\n  });\n  return (\n    <svg ref={brushRef} height={height} width={width}>\n      {props.children}\n    </svg>\n  );\n};\n\nconst BrushableHistogram = ({ data, xScale, setMinimum, setMaximum }) => {\n  const width = xScale.range()[1];\n  const height = 20;\n  const scale = xScale;\n\n  function setFilterBounds(inputs) {\n    if (inputs?.length !== 2) {\n      inputs = xScale.domain();\n    }\n    // scale inversion\n    setMinimum(scale.invert(inputs[0]));\n    // set bounds\n    setMaximum(scale.invert(inputs[1]));\n  }\n\n  return (\n    <Brush\n      width={width}\n      height={height}\n      scale={scale}\n      onChange={setFilterBounds}>\n      <Histogram\n        data={data}\n        width={width}\n        height={height}\n        scale={scale}></Histogram>\n    </Brush>\n  );\n};\n\nexport const TimeFilter = ({ data, xScale, columnDef, onFilterChanged }) => {\n  const [minimum, setMinimum] = useState(d3.min(data));\n  const [maximum, setMaximum] = useState(d3.max(data));\n  const debouncedMin = useDebounce(minimum, 100);\n  const debouncedMax = useDebounce(maximum, 100);\n  useEffect(() => {\n    onFilterChanged(columnDef.tableData.id, [debouncedMin, debouncedMax]);\n  }, [debouncedMin, debouncedMax]);\n  return (\n    <BrushableHistogram\n      xScale={xScale}\n      data={data}\n      setMinimum={setMinimum}\n      setMaximum={setMaximum}></BrushableHistogram>\n  );\n};\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n","//@ts-nocheck\n\nimport React, { forwardRef, useMemo } from \"react\";\nimport MaterialTable, {\n  MTableToolbar,\n  MTableAction,\n  MTableActions,\n} from \"material-table\";\nimport ProvenanceGraph from \"./ProvenanceGraph\";\nimport ProvenanceIsolatedNodes from \"./ProvenanceIsolatedNodes\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport Label from \"@material-ui/icons/Label\";\n// typings are here:\nimport { Icons } from \"material-table\";\nimport * as d3 from \"d3\";\nimport TagsInput from \"react-tagsinput\";\nimport eventMapping from \"./eventMapping\";\nimport TagStyles from \"./tagstyles.module.css\";\nimport TagWrapper from \"./reactTagWrapper\";\nimport { TimeFilter, CategoricalFilter } from \"./TableFilters\";\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\n// import data\nconst width = 200;\nconst MaterialTableWrapper = ({ provenanceData }) => {\n  const [checkedTags, setCheckedTags] = React.useState([]);\n  const [rerender, setRerender] = React.useState(false);\n  const [min, max] = d3.extent(\n    provenanceData,\n    (datum) => datum.provGraph.totalTime\n  );\n\n  const xScale = d3.scaleLinear().domain([0, max]).range([0, width]);\n\n  function renderProvenanceNodes(data) {\n    console.log(\"render provenance nodes called\");\n    return (\n      <ProvenanceIsolatedNodes\n        nodes={data.provGraph.nodes}></ProvenanceIsolatedNodes>\n    );\n  }\n  function renderProvenanceTime(data) {\n    console.log(\"render provenance time called\");\n    return (\n      <svg width={250} height={20}>\n        <ProvenanceGraph\n          provenanceGraph={data.provGraph}\n          xScale={xScale}\n          renderIcons={false}\n          collapseEvents={true}\n        />\n      </svg>\n    );\n  }\n\n  const [timeColumn] = React.useState({\n    title: \"Time To Complete\",\n    field: \"provGraph\",\n    width: 250,\n    cellStyle: {\n      maxWidth: 250,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.provGraph.totalTime - b.provGraph.totalTime,\n    render: renderProvenanceTime,\n    customFilterAndSearch: (filterResults, datum) => {\n      // https://github.com/mbrn/material-table/pull/1351\n      if (\n        datum.provGraph.totalTime >= filterResults[0] &&\n        datum.provGraph.totalTime <= filterResults[1]\n      ) {\n        return true;\n      }\n      delete datum.tableData.checked;\n\n      return false;\n    },\n\n    filterComponent: (props) => (\n      <TimeFilterObj\n        {...props}\n        xScale={xScale}\n        data={provenanceData.map(\n          (graph) => graph.provGraph.totalTime\n        )}></TimeFilterObj>\n    ),\n  });\n  function generateCategoricalScale(data, width) {\n    const uniqueValues = Array.from(new Set(data));\n    return d3\n      .scaleBand()\n      .rangeRound([0, width])\n      .padding(0)\n      .domain(uniqueValues);\n  }\n\n  let correctWidth = 50;\n  let correctScale = generateCategoricalScale([\"true\", \"false\"], correctWidth);\n\n  const eventNodes = useMemo(() => {\n    return provenanceData\n      .map((graph) => graph.provGraph.nodes.map((node) => node.event))\n      .flat()\n      .filter(\n        (item) => item !== \"startedProvenance\" && item !== \"Finished Task\"\n      );\n  });\n\n  let eventWidth = 250;\n  let eventScale = generateCategoricalScale(eventNodes, eventWidth);\n  /*let correctScale = d3\n    .scaleBand()\n    .rangeRound([0, correctWidth])\n    .padding(0)\n    .domain([true, false]);*/\n\n  function renderProvenanceAccuracy(rowData) {\n    console.log(rowData);\n    //const values = [true, false];\n    console.log(\"x\", correctScale(rowData.provGraph.correct));\n    return (\n      <svg width={100} height={20}>\n        <rect\n          x={correctScale(rowData.provGraph.correct)}\n          width={20}\n          height={20}></rect>\n      </svg>\n    );\n  }\n  const allObj = {};\n  Object.keys(eventMapping).forEach((eventKey) => {\n    allObj[eventKey] = eventMapping[eventKey].icon;\n  });\n\n  const [correct] = React.useState({\n    title: \"Accuracy\",\n    field: \"provGraph correct\",\n    width: correctWidth + 10,\n    cellStyle: {\n      maxWidth: correctWidth + 10,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.provGraph.correct - b.provGraph.correct,\n    render: renderProvenanceAccuracy,\n    customFilterAndSearch: (filterResults, datum) => {\n      // https://github.com/mbrn/material-table/pull/1351\n      if (filterResults.includes(datum.provGraph.correct)) {\n        return true;\n      }\n      delete datum.tableData.checked;\n\n      return false;\n    },\n\n    filterComponent: (props) => (\n      <CategoricalFilter\n        {...props}\n        width={correctWidth}\n        scale={correctScale}\n        labels={{ true: \"true\", false: \"false\" }}\n        data={provenanceData.map(\n          (graph) => graph.provGraph.correct\n        )}></CategoricalFilter>\n    ),\n  });\n\n  const [eventsCol] = React.useState({\n    title: \"Events Used\",\n    field: \"provGraph\",\n    width: 500,\n    cellStyle: {\n      maxWidth: 500,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.provGraph.nodes.length - b.provGraph.nodes.length,\n    render: renderProvenanceNodes,\n    customFilterAndSearch: (filterResults, datum) => {\n      console.log(filterResults, datum);\n      // https://github.com/mbrn/material-table/pull/1351\n      for (let i = 0; i < datum.provGraph.nodes.length; i++) {\n        if (filterResults.includes(datum.provGraph.nodes[i].event)) {\n          return true;\n        }\n      }\n      // unselect any filtered items\n      delete datum.tableData.checked;\n      return false;\n    },\n    filterComponent: (props) => (\n      <CategoricalFilter\n        {...props}\n        width={eventWidth}\n        scale={eventScale}\n        labels={allObj}\n        data={eventNodes}></CategoricalFilter>\n    ),\n  });\n  const [notesColumn] = React.useState({\n    title: \"Notes\",\n    field: \"None\",\n    cellStyle: {\n      padding: \"4px 16px\",\n    },\n    width: 500,\n    customSort: (a, b) => b.tableData.tags.length - a.tableData.tags.length,\n    filterComponent: () => <div></div>,\n    render: (rowData) => {\n      if (!Array.isArray(rowData.tableData?.tags)) {\n        rowData.tableData.tags = [];\n      }\n      return (\n        <TagWrapper\n          tags={rowData.tableData.tags}\n          onTagChange={(action, tag) => {\n            // check if rowData is selected;\n            if (action === \"Add\") {\n              rowData.tableData.tags.push(tag);\n            } else {\n              const index = rowData.tableData.tags.findIndex((iterTag) => {\n                return iterTag.name === tag[0]?.name;\n              });\n              if (index > -1) {\n                rowData.tableData.tags.splice(index, 1);\n              }\n            }\n          }}></TagWrapper>\n      );\n    },\n  });\n  const TimeFilterObj = TimeFilter;\n  return (\n    <MaterialTable\n      title={\"Provenance Table\"}\n      components={{\n        Actions: (props) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                float: \"left\",\n                backgroundColor: \"#ffe2ec\",\n              }}>\n              <MTableActions {...props}></MTableActions>\n            </div>\n          );\n        },\n        Action: (props) => {\n          if (props.action.myComponent) {\n            let ActionComponent = props.action.myComponent;\n            //@ts-ignore\n            return <ActionComponent {...props}></ActionComponent>;\n          }\n          return <MTableAction {...props}></MTableAction>;\n        },\n      }}\n      columns={[timeColumn, correct, eventsCol, notesColumn]}\n      onSelectionChange={(selections) => {\n        if (selections.length === 0) {\n          setCheckedTags([]);\n        }\n      }}\n      actions={[\n        {\n          myComponent: (props) => {\n            return (\n              <TagWrapper\n                tags={checkedTags.filter((tag) => !tag.removed)}\n                onTagChange={(action, tag) => {\n                  // check if rowData is selected;\n                  if (action === \"Add\") {\n                    let temp = Object.assign([], checkedTags);\n                    let existing = temp.find(\n                      (checkedTags) => checkedTags.name === tag.name\n                    );\n                    if (existing) {\n                      existing.removed = false;\n                    } else {\n                      temp.push(tag);\n                    }\n\n                    setCheckedTags(temp);\n                  } else {\n                    let index = checkedTags.findIndex(\n                      (item) => item.name === tag?.[0].name\n                    );\n                    let temp = Object.assign([], checkedTags);\n\n                    if (index > -1) {\n                      temp[index].removed = true;\n                    }\n                    setCheckedTags(temp);\n                  }\n                }}></TagWrapper>\n            );\n          },\n        },\n        {\n          tooltip: \"Update tags of selected rows (appends ontop).\",\n          icon: (props, ref) => <Label {...props} ref={ref} />,\n          onClick: (evt, data) => {\n            data.forEach((datum) => {\n              if (datum.tableData.checked) {\n                checkedTags.forEach((tag) => {\n                  const datumTagIndex = datum.tableData.tags.findIndex(\n                    (currentTag) => currentTag.name === tag.name\n                  );\n                  if (datumTagIndex === -1) {\n                    if (!tag.removed) {\n                      datum.tableData.tags.push(tag);\n                    }\n                  } else {\n                    if (tag.removed) {\n                      datum.tableData.tags.splice(datumTagIndex, 1);\n                    }\n                  }\n                });\n              }\n            });\n            setRerender(!rerender);\n          },\n        },\n      ]}\n      data={provenanceData}\n      icons={tableIcons}\n      options={{\n        selection: true,\n        search: false,\n        paging: false,\n        filtering: true,\n        maxBodyHeight: \"93vh\",\n      }}\n    />\n  );\n};\n\nexport default MaterialTableWrapper;\n\n/*[\n        {\n          name: \"Mehmet\",\n          surname: \"Baran\",\n          birthYear: 1987,\n          birthCity: 63,\n          imageUrl:\n            \"https://avatars0.githubusercontent.com/u/7895451?s=460&v=4\",\n        },\n        {\n          name: \"Zerya Betül\",\n          surname: \"Baran\",\n          birthYear: 2017,\n          birthCity: 34,\n          imageUrl:\n            \"https://avatars0.githubusercontent.com/u/7895451?s=460&v=4\",\n        },\n      ]*/\n","import React from \"react\";\nimport { relativeProvenanceData } from \"../common/data/provenanceMocks.js\";\nimport MaterialTableWrapper from \"../components/ProvenanceTable\";\n\nconst Table = ({ location }) => {\n  let newData = relativeProvenanceData[0].map((dataArr) => {\n    return { provGraph: dataArr };\n  });\n  for (let i = 0; i < 2; i++) {\n    newData = newData.concat(_.cloneDeep(newData));\n  }\n  return <MaterialTableWrapper provenanceData={newData} />;\n};\n\nexport default Table;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport styles from \"./Main.module.css\";\nimport _ from \"lodash\";\nimport { relativeProvenanceData } from \"./common/data/provenanceMocks.js\";\nimport MaterialTableWrapper from \"./components/ProvenanceTable\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport Upload from \"./pages/Upload\";\nimport Overview from \"./pages/Overview\";\nimport Export from \"./pages/Export\";\nimport Table from \"./pages/Table\";\n\nconst Main = ({ location }) => {\n  return (\n    <Wrapper>\n      <TransitionGroup className=\"transition-group\">\n        <CSSTransition key={location.key} timeout={500} classNames=\"fade\">\n          <section className=\"route-section\">\n            <Switch location={location}>\n              <Route path=\"/Upload\" component={Upload}></Route>\n              <Route path=\"/Overview\" component={Overview}></Route>\n              <Route path=\"/Table\" component={Table}></Route>\n              <Route path=\"/Export\" component={Export}></Route>\n            </Switch>\n          </section>\n        </CSSTransition>\n      </TransitionGroup>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  .fade-enter {\n    opacity: 0.01;\n  }\n\n  .fade-enter.fade-enter-active {\n    opacity: 1;\n    transition: opacity 300ms ease-in;\n  }\n\n  .fade-exit {\n    opacity: 1;\n  }\n\n  .fade-exit.fade-exit-active {\n    opacity: 0.01;\n    transition: opacity 300ms ease-in;\n  }\n\n  div.transition-group {\n    position: relative;\n  }\n\n  section.route-section {\n    position: absolute;\n    width: 100%;\n    top: 0;\n    left: 0;\n  }\n`;\nexport default withRouter(Main);\n","import React from \"react\";\nimport styles from \"./SidePane.module.css\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CloudUpload from \"@material-ui/icons/CloudUpload\";\nimport TableChart from \"@material-ui/icons/TableChart\";\nimport GetApp from \"@material-ui/icons/GetApp\";\nimport BarChart from \"@material-ui/icons/BarChart\";\nimport { Link, LinkProps } from \"react-router-dom\";\nconst SidePane = ({}) => {\n  const HomeLink = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Home\" {...props} />);\n  const Upload = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Upload\" {...props} />);\n  const Overview = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Overview\" {...props} />);\n  const Table = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Table\" {...props} />);\n  const Export = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Export\" {...props} />);\n  return (\n    <Drawer variant=\"permanent\" anchor=\"left\">\n      <Divider />\n      <List>\n        <ListItem component={HomeLink}>\n          <img className={styles.logo} src={\"./Experi.png\"}></img>\n        </ListItem>\n        {[\n          { text: \"Upload\", link: Upload, icon: <CloudUpload></CloudUpload> },\n          { text: \"Overview\", link: Overview, icon: <BarChart></BarChart> },\n          {\n            text: \"Participant Table\",\n            link: Table,\n            icon: <TableChart></TableChart>,\n          },\n          { text: \"Export\", link: Export, icon: <GetApp></GetApp> },\n        ].map((item, index) => {\n          return (\n            <React.Fragment>\n              <ListItem button component={item.link}>\n                <ListItemIcon>{item.icon}</ListItemIcon>\n                <ListItemText primary={item.text} />\n              </ListItem>\n            </React.Fragment>\n          );\n        })}\n      </List>\n      <Divider />\n    </Drawer>\n  );\n};\n\nexport default SidePane;\n","import React from \"react\";\nimport { MemoryRouter, Link as RouterLink } from \"react-router-dom\";\nimport styles from \"./App.module.css\";\nimport Main from \"./Main\";\nimport SidePane from \"./SidePane\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MemoryRouter initialEntries={[\"/\"]} initialIndex={0}>\n        <div className={styles.container}>\n          <div className={styles.sidePane}>\n            <SidePane></SidePane>\n          </div>\n          <div className={styles.main}>\n            <Main></Main>\n          </div>\n        </div>\n      </MemoryRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}